{"version":3,"file":"static/js/892.8be64f07.chunk.js","mappings":"sOAIaA,EAAkB,SAAHC,GAMrB,IALLC,EAAWD,EAAXC,YACAC,EAAUF,EAAVE,WACAC,EAAUH,EAAVG,WACAC,EAAYJ,EAAZI,aACAC,EAAUL,EAAVK,WAEQC,GAAgBC,EAAAA,EAAAA,MAAhBD,YACFE,GAAoBC,EAAAA,EAAAA,SAAMH,EAAa,aAAc,IAAII,MAEzDC,OACYC,IAAhBN,EAA4BF,EAAeI,EAEvCK,OACYD,IAAhBN,EAA4BD,EAAaG,EAE3C,OACEM,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAAA,oBAAwBC,SAAA,EACtCC,EAAAA,EAAAA,KAAA,UAAQH,UAAWC,EAAAA,EAAAA,qBAAyBC,SACzChB,GACGkB,EAAAA,EAAAA,SAAOR,EAAgB,cACvBQ,EAAAA,EAAAA,SAAON,EAAc,kBAE3BC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAAA,cAAkBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,UAAQH,UAAWC,EAAAA,EAAAA,wBAA6BI,QAASjB,EAAWc,SACjE,OAEHC,EAAAA,EAAAA,KAAA,UAAQH,UAAWC,EAAAA,EAAAA,oBAAyBI,QAASlB,EAAWe,SAC7D,WAKX,C,sLChCaI,EAAsB,SAAHrB,GAAqC,IAA/BC,EAAWD,EAAXC,YAAaqB,EAAUtB,EAAVsB,WAC3CC,GAAWC,EAAAA,EAAAA,MAETlB,GAAgBC,EAAAA,EAAAA,MAAhBD,YACFE,GAAoBC,EAAAA,EAAAA,SAAMH,EAAa,aAAc,IAAII,MAE/D,OACEI,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAAA,uBAA2BC,SAAA,EACzCC,EAAAA,EAAAA,KAAA,UACEH,UAAS,GAAAU,OAAKT,EAAAA,EAAAA,iBAAoB,KAAAS,OAAIT,EAAAA,EAAAA,qBAAwB,KAAAS,OAC5DxB,EAAce,EAAAA,EAAAA,sBAA4B,IAE5CI,QAAS,WACPG,EAAS,SAADE,QAAUN,EAAAA,EAAAA,SAAOX,EAAmB,gBAC5Cc,GAAW,EACb,EAAEL,SACH,WAGDC,EAAAA,EAAAA,KAAA,UACEH,UAAS,GAAAU,OAAKT,EAAAA,EAAAA,iBAAoB,KAAAS,OAAIT,EAAAA,EAAAA,mBAAsB,KAAAS,OACzDxB,EAA0C,GAA5Be,EAAAA,EAAAA,uBAEjBI,QAAS,WACPG,EAAS,OAADE,QAAQN,EAAAA,EAAAA,SAAOX,EAAmB,gBAC1Cc,GAAW,EACb,EAAEL,SACH,UAKP,E,gECQe,SAASS,EAAIC,EAAWC,GAErC,IADAC,EAAAA,EAAAA,GAAa,EAAGC,YACXF,GAAkC,YAAtBG,EAAAA,EAAAA,GAAQH,GAAwB,OAAO,IAAIlB,KAAKsB,KACjE,IAAIC,EAAQL,EAASK,OAAQC,EAAAA,EAAAA,GAAUN,EAASK,OAAS,EACrDE,EAASP,EAASO,QAASD,EAAAA,EAAAA,GAAUN,EAASO,QAAU,EACxDC,EAAQR,EAASQ,OAAQF,EAAAA,EAAAA,GAAUN,EAASQ,OAAS,EACrDC,EAAOT,EAASS,MAAOH,EAAAA,EAAAA,GAAUN,EAASS,MAAQ,EAClDC,EAAQV,EAASU,OAAQJ,EAAAA,EAAAA,GAAUN,EAASU,OAAS,EACrDC,EAAUX,EAASW,SAAUL,EAAAA,EAAAA,GAAUN,EAASW,SAAW,EAC3DC,EAAUZ,EAASY,SAAUN,EAAAA,EAAAA,GAAUN,EAASY,SAAW,EAG3DC,GAAOC,EAAAA,EAAAA,SAAOf,GACdgB,EAAiBR,GAAUF,GAAQW,EAAAA,EAAAA,SAAUH,EAAMN,EAAiB,GAARF,GAAcQ,EAG1EI,EAAeR,GAAQD,GAAQU,EAAAA,EAAAA,SAAQH,EAAgBN,EAAe,EAARD,GAAaO,EAG3EI,EAAeR,EAAkB,GAARD,EACzBU,EAAeR,EAAyB,GAAfO,EACzBE,EAAyB,IAAfD,EACVE,EAAY,IAAIxC,KAAKmC,EAAaM,UAAYF,GAClD,OAAOC,CACT,CC7DO,IAAME,EAAkB,SAAHpD,GAOrB,IANLC,EAAWD,EAAXC,YACAoD,EAAcrD,EAAdqD,eACAjD,EAAYJ,EAAZI,aACAkD,EAAetD,EAAfsD,gBACAjD,EAAUL,EAAVK,WACAkD,EAAavD,EAAbuD,cAEMhC,GAAWC,EAAAA,EAAAA,MACTlB,GAAgBC,EAAAA,EAAAA,MAAhBD,YACFE,GAAoBC,EAAAA,EAAAA,SAAMH,EAAa,aAAc,IAAII,MACzDG,OACYD,IAAhBN,EAA4BD,EAAaG,EA0DrCc,EAAa,SAAAkC,GACjBH,EAAeG,EACjB,EAEA,OACE1C,EAAAA,EAAAA,MAAA2C,EAAAA,SAAA,CAAAxC,SAAA,EACEH,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAAA,QAAYC,SAAA,EAC1BC,EAAAA,EAAAA,KAACnB,EAAAA,EAAe,CACdE,YAAaA,EACbE,WAvCW,WACjB,IAAMuD,GAAajD,EAAAA,EAAAA,SAAMH,EAAa,aAAc,IAAII,MACxD,GAAIT,EAAa,CACf,IAAM0D,EAAoBjC,EAAIgC,EAAY,CAAEvB,QAAS,IACrDmB,GAAgBnC,EAAAA,EAAAA,SAAOwC,EAAmB,aAC1C,IAAMC,GAAUzC,EAAAA,EAAAA,SAAOwC,EAAmB,cAC1CpC,EAAS,SAADE,OAAUmC,GACpB,KAAO,CACL,IAAMC,EAAUnC,EAAIgC,EAAY,CAAErB,MAAO,IACzCkB,EAAcM,GACd,IAAMD,GAAUzC,EAAAA,EAAAA,SAAO0C,EAAS,cAChCtC,EAAS,OAADE,OAAQmC,GAClB,CACF,EA2BQ1D,WAzBW,WACjB,IAAMwD,GAAajD,EAAAA,EAAAA,SAAMH,EAAa,aAAc,IAAII,MACxD,GAAIT,EAAa,CACf,IAAM0D,EAAoBjC,EAAIgC,EAAY,CAAEvB,OAAQ,IACpDmB,GAAgBnC,EAAAA,EAAAA,SAAOwC,EAAmB,aAC1C,IAAMC,GAAUzC,EAAAA,EAAAA,SAAOwC,EAAmB,cAC1CpC,EAAS,SAADE,OAAUmC,GACpB,KAAO,CACL,IAAME,EAAUpC,EAAIgC,EAAY,CAAErB,KAAM,IACxCkB,EAAcO,GACd,IAAMF,GAAUzC,EAAAA,EAAAA,SAAO2C,EAAS,cAChCvC,EAAS,OAADE,OAAQmC,GAClB,CACF,EAaQvD,WAAYA,EACZD,aAAcA,KAGhBc,EAAAA,EAAAA,KAACG,EAAmB,CAClBpB,YAAaA,EACbqB,WAAYA,QAIhBR,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAAA,cAAkBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,UACEH,UAAS,GAAAU,OAAKT,EAAAA,EAAAA,uBAA0B,KAAAS,OACtCT,EAAAA,EAAAA,2BAA8B,KAAAS,OAC5BxB,EAAce,EAAAA,EAAAA,4BAAkC,IACpDI,QAAS,WACPG,EAAS,SAADE,QAAUN,EAAAA,EAAAA,SAAON,EAAc,gBACvCS,GAAW,EACb,EAAEL,SACH,WAGDC,EAAAA,EAAAA,KAAA,UACEH,UAAS,GAAAU,OAAKT,EAAAA,EAAAA,uBAA0B,KAAAS,OACtCT,EAAAA,EAAAA,yBAA4B,KAAAS,OACzBxB,EAAgD,GAAlCe,EAAAA,EAAAA,6BACnBI,QAAS,WACPG,EAAS,OAADE,QAAQN,EAAAA,EAAAA,SAAON,EAAc,gBACrCS,GAAW,EACb,EAAEL,SACH,aAMT,E,4CC5Fe,SAAS8C,EAAkBC,EAAeC,GACvD,IAAIC,GACJrC,EAAAA,EAAAA,GAAa,EAAGC,WAChB,IAAIqC,EAAWH,GAAiB,CAAC,EAC7BI,GAAY1B,EAAAA,EAAAA,SAAOyB,EAASE,OAC5BC,GAAU5B,EAAAA,EAAAA,SAAOyB,EAASI,KAC1BC,EAAUF,EAAQnB,UAGtB,KAAMiB,EAAUjB,WAAaqB,GAC3B,MAAM,IAAIC,WAAW,oBAEvB,IAAIC,EAAQ,GACRpE,EAAc8D,EAClB9D,EAAYqE,SAAS,EAAG,EAAG,EAAG,GAC9B,IAAIC,EAAOC,OAA4F,QAApFX,EAA4B,OAAZD,QAAgC,IAAZA,OAAqB,EAASA,EAAQW,YAAoC,IAAlBV,EAA2BA,EAAgB,GAC1J,GAAIU,EAAO,GAAKE,MAAMF,GAAO,MAAM,IAAIH,WAAW,kDAClD,KAAOnE,EAAY6C,WAAaqB,GAC9BE,EAAMK,MAAKrC,EAAAA,EAAAA,SAAOpC,IAClBA,EAAY0E,QAAQ1E,EAAY2E,UAAYL,GAC5CtE,EAAYqE,SAAS,EAAG,EAAG,EAAG,GAEhC,OAAOD,CACT,C,gDC0FA,EA7HqB,WACnB,IACIQ,EADE3D,GAAWC,EAAAA,EAAAA,MAGjB2D,GAAoCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA5CI,EAAWF,EAAA,GAAEG,EAAYH,EAAA,GAChCI,GAAsCL,EAAAA,EAAAA,WAAS,GAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA7CxF,EAAWyF,EAAA,GAAErC,EAAcqC,EAAA,GAClCC,GAA0BP,EAAAA,EAAAA,UAAS,MAAKQ,GAAAN,EAAAA,EAAAA,GAAAK,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAGtBG,GAAoCX,EAAAA,EAAAA,WAASY,EAAAA,EAAAA,MAAeC,GAAAX,EAAAA,EAAAA,GAAAS,EAAA,GAArD1F,EAAU4F,EAAA,GAAE1C,EAAa0C,EAAA,GAEhCC,GAAwCd,EAAAA,EAAAA,WACtCjE,EAAAA,EAAAA,UAAO6E,EAAAA,EAAAA,KAAgB,aACxBG,GAAAb,EAAAA,EAAAA,GAAAY,EAAA,GAFM9F,EAAY+F,EAAA,GAAE7C,EAAe6C,EAAA,GAG9BC,GAAuB3F,EAAAA,EAAAA,SAAML,EAAc,WAAY,IAAIM,MAE3D2B,EAAO0B,EAAkB,CAC7BM,OAAOgC,EAAAA,EAAAA,SAAYD,GACnB7B,KAAK+B,EAAAA,EAAAA,UAAUC,EAAAA,EAAAA,SAAWH,MAG5BI,GAAsCpB,EAAAA,EAAAA,UAAS,CAC7Cf,OAAOgC,EAAAA,EAAAA,SAAYhG,EAAY,CAAEoG,aAAc,IAC/ClC,KAAKzB,EAAAA,EAAAA,UAAQuD,EAAAA,EAAAA,SAAYhG,EAAY,CAAEoG,aAAc,IAAM,KAC3DC,GAAApB,EAAAA,EAAAA,GAAAkB,EAAA,GAHKG,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAI5BG,EAAO9C,EAAkB4C,IAEPG,EAAAA,EAAAA,SAAiBzG,EAAYsG,IAgBnDC,EALuB,CACrBvC,OATqBgC,EAAAA,EAAAA,SAAYhG,EAAY,CAC7CoG,aAAc,IASdlC,KAPmBzB,EAAAA,EAAAA,UACnBuD,EAAAA,EAAAA,SAAYhG,EAAY,CAAEoG,aAAc,IACxC,KAWJ,IAAMM,EAAmB,WACvBvB,GAAa,GACbwB,SAASC,KAAKC,MAAMC,SAAW,MACjC,EAEAC,GAAoCC,EAAAA,EAAAA,IAClClG,EAAAA,EAAAA,SAAOd,EAAY,YADPiH,EAAQF,EAAdG,KAAgBC,EAAOJ,EAAPI,QAmCxB,IA/BAC,EAAAA,EAAAA,YAAU,WACR,GAAIH,EAAU,CACZ,IAAMI,GAAKC,EAAAA,EAAAA,GAAOL,EAASC,MAE3BC,IACA1B,EAAS4B,EACX,CACF,GAAG,CAACJ,EAAUE,KAGdC,EAAAA,EAAAA,YAAU,WACRlG,EAAS,SAADE,QAAUN,EAAAA,EAAAA,SAAOd,EAAY,eACvC,GAAG,KAGHoH,EAAAA,EAAAA,YAAU,WACR,IAAMG,EAAgB,SAAAC,GACF,WAAdA,EAAMC,KACRf,GAEJ,EAMA,OAJIxB,GACFwC,OAAOC,iBAAiB,UAAWJ,GAG9B,WACLG,OAAOE,oBAAoB,UAAWL,EACxC,CACF,GAAG,CAACrC,IAEAM,EAAO,CACT,IAAMhF,GAAeM,EAAAA,EAAAA,SAAOd,EAAY,cACxC6E,EAAeW,EAAMqC,QAAO,SAAAC,GAAI,OAAIA,EAAK1F,OAAS5B,CAAY,GAChE,CAEA,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAAA,SAAaC,SAAA,EAC3BC,EAAAA,EAAAA,KAACkC,EAAe,CACd/C,WAAYA,EACZkD,cAAeA,EACfnD,aAAcgG,EACd9C,gBAAiBA,EACjBrD,YAAaA,EACboD,eAAgBA,EAChBwD,KAAMA,IAEP5G,GACCiB,EAAAA,EAAAA,KAACkH,EAAAA,EAAY,CACX/H,WAAY+F,EACZ/D,KAAMA,EACNkB,cAAeA,EACfsD,KAAMA,EACNS,SAAUA,GAAYA,EACtBxB,SAAUA,EACVzC,eAAgBA,KAGlBnC,EAAAA,EAAAA,KAACmH,EAAAA,EAAU,CACTxB,KAAMA,EACNxG,WAAYA,EACZkD,cAAeA,EACf2B,aAAcA,GAAgBA,IAGjCK,IAAerE,EAAAA,EAAAA,KAACoH,EAAAA,EAAY,CAACC,QAASxB,MAG7C,C,uEC5He,SAASf,IACtB,OAAOwC,EAAAA,EAAAA,SAAW9H,KAAK+H,MACzB,C","sources":["components/Calendar/PeriodPaginator/PeriodPaginator.jsx","components/Calendar/PeriodPaginatorType/PeriodPaginatorType.jsx","../node_modules/date-fns/esm/add/index.js","components/Calendar/CalendarToolbar.jsx","../node_modules/date-fns/esm/eachDayOfInterval/index.js","pages/CalendarPage.jsx","../node_modules/date-fns/esm/startOfToday/index.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport css from '../Caledar.module.css';\nimport { format, parse } from 'date-fns';\n\nexport const PeriodPaginator = ({\n  isMonthPage,\n  nextPeriod,\n  prevPeriod,\n  currentMonth,\n  currentDay,\n}) => {\n  const { currentDate } = useParams();\n  const parsedCurrentDate = parse(currentDate, 'yyyy-MM-dd', new Date());\n\n  const formattedMonth =\n    currentDate === undefined ? currentMonth : parsedCurrentDate;\n\n  const formattedDay =\n    currentDate === undefined ? currentDay : parsedCurrentDate;\n\n  return (\n    <div className={css.toolbar__innerBlock}>\n      <button className={css.toolbar__curerntDate}>\n        {isMonthPage\n          ? format(formattedMonth, 'MMMM yyyy')\n          : format(formattedDay, 'd MMMM yyyy')}\n      </button>\n      <div className={css.toggleButtons}>\n        <button className={css.toggleButtons__previous} onClick={prevPeriod}>\n          {'<'}\n        </button>\n        <button className={css.toggleButtons__next} onClick={nextPeriod}>\n          {'>'}\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { useNavigate } from 'react-router';\nimport css from '../Caledar.module.css';\nimport { format, parse } from 'date-fns';\nimport { useParams } from 'react-router-dom';\n\nexport const PeriodPaginatorType = ({ isMonthPage, changeType }) => {\n  const navigate = useNavigate();\n\n  const { currentDate } = useParams();\n  const parsedCurrentDate = parse(currentDate, 'yyyy-MM-dd', new Date());\n\n  return (\n    <div className={css.toolbar__calendarRange}>\n      <button\n        className={`${css.toolbar__buttons} ${css.toolbar__monthButton} ${\n          isMonthPage ? css.toolbar__ActiveButton : ''\n        }`}\n        onClick={() => {\n          navigate(`month/${format(parsedCurrentDate, 'yyyy-MM-dd')}`);\n          changeType(true);\n        }}\n      >\n        Month\n      </button>\n      <button\n        className={`${css.toolbar__buttons} ${css.toolbar__dayButton} ${\n          !isMonthPage ? css.toolbar__ActiveButton : ''\n        }`}\n        onClick={() => {\n          navigate(`day/${format(parsedCurrentDate, 'yyyy-MM-dd')}`);\n          changeType(false);\n        }}\n      >\n        Day\n      </button>\n    </div>\n  );\n};\n","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport addDays from \"../addDays/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added        |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport default function add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;\n\n  // Add years and months\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date;\n\n  // Add weeks and days\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;\n\n  // Add days, hours, minutes and seconds\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}","import css from './Caledar.module.css';\n\nimport { PeriodPaginator } from './PeriodPaginator/PeriodPaginator';\nimport { PeriodPaginatorType } from './PeriodPaginatorType/PeriodPaginatorType';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { format, parse, add } from 'date-fns';\n\nexport const CalendarToolBar = ({\n  isMonthPage,\n  setIsMonthPage,\n  currentMonth,\n  setCurrentMonth,\n  currentDay,\n  setCurrentDay,\n}) => {\n  const navigate = useNavigate();\n  const { currentDate } = useParams();\n  const parsedCurrentDate = parse(currentDate, 'yyyy-MM-dd', new Date());\n  const formattedDay =\n    currentDate === undefined ? currentDay : parsedCurrentDate;\n\n  // Current Week\n  // const [currentWeek, setCurrentWeek] = useState({\n  //   start: startOfWeek(today, { weekStartsOn: 1 }),\n  //   end: addDays(endOfWeek(today, { weekStartsOn: 0 }), 1),\n  // });\n  // const Week = eachDayOfInterval(currentWeek);\n\n  // Weeks\n  // const nextWeek = () => {\n  //   const nextWeekStart = addWeeks(currentWeek.start, 1);\n  //   const nextWeekEnd = addDays(\n  //     endOfWeek(nextWeekStart, { weekStartsOn: 0 }),\n  //     1\n  //   );\n  //   setCurrentWeek({ start: addWeeks(currentWeek.start, 1), end: nextWeekEnd });\n  // };\n\n  // const prevWeek = () => {\n  //   const prevWeekStart = subWeeks(currentWeek.start, 1);\n  //   const prevWeekEnd = addDays(\n  //     endOfWeek(prevWeekStart, { weekStartsOn: 0 }),\n  //     1\n  //   );\n  //   setCurrentWeek({ start: prevWeekStart, end: prevWeekEnd });\n  // };\n\n  const prevPeriod = () => {\n    const parsedDate = parse(currentDate, 'yyyy-MM-dd', new Date());\n    if (isMonthPage) {\n      const firstDayPrevMonth = add(parsedDate, { months: -1 });\n      setCurrentMonth(format(firstDayPrevMonth, 'MMM-yyyy'));\n      const newDate = format(firstDayPrevMonth, 'yyyy-MM-dd');\n      navigate(`month/${newDate}`);\n    } else {\n      const prevDay = add(parsedDate, { days: -1 });\n      setCurrentDay(prevDay);\n      const newDate = format(prevDay, 'yyyy-MM-dd');\n      navigate(`day/${newDate}`);\n    }\n  };\n\n  const nextPeriod = () => {\n    const parsedDate = parse(currentDate, 'yyyy-MM-dd', new Date());\n    if (isMonthPage) {\n      const firstDayPrevMonth = add(parsedDate, { months: 1 });\n      setCurrentMonth(format(firstDayPrevMonth, 'MMM-yyyy'));\n      const newDate = format(firstDayPrevMonth, 'yyyy-MM-dd');\n      navigate(`month/${newDate}`);\n    } else {\n      const nextDay = add(parsedDate, { days: 1 });\n      setCurrentDay(nextDay);\n      const newDate = format(nextDay, 'yyyy-MM-dd');\n      navigate(`day/${newDate}`);\n    }\n  };\n\n  const changeType = state => {\n    setIsMonthPage(state);\n  };\n\n  return (\n    <>\n      <div className={css.toolbar}>\n        <PeriodPaginator\n          isMonthPage={isMonthPage}\n          prevPeriod={prevPeriod}\n          nextPeriod={nextPeriod}\n          currentDay={currentDay}\n          currentMonth={currentMonth}\n        />\n\n        <PeriodPaginatorType\n          isMonthPage={isMonthPage}\n          changeType={changeType}\n        />\n      </div>\n\n      <div className={css.calendarRange}>\n        <button\n          className={`${css.calendarRange__buttons} ${\n            css.calendarRange__monthButton\n          } ${isMonthPage ? css.calendarRange__ActiveButton : ''}`}\n          onClick={() => {\n            navigate(`month/${format(formattedDay, 'yyyy-MM-dd')}`);\n            changeType(true);\n          }}\n        >\n          Month\n        </button>\n        <button\n          className={`${css.calendarRange__buttons} ${\n            css.calendarRange__dayButton\n          } ${!isMonthPage ? css.calendarRange__ActiveButton : ''}`}\n          onClick={() => {\n            navigate(`day/${format(formattedDay, 'yyyy-MM-dd')}`);\n            changeType(false);\n          }}\n        >\n          Day\n        </button>\n      </div>\n    </>\n  );\n};\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * const result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\nexport default function eachDayOfInterval(dirtyInterval, options) {\n  var _options$step;\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime();\n\n  // Throw an exception if start date is after end date or if any date is `Invalid Date`\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n  return dates;\n}","import { useState, useEffect } from 'react';\nimport AddTaskModal from 'components/AddTaskModal/AddTaskModal';\n// import TasksColumnsList from 'components/TasksColumnsList/TasksColumnsList';\nimport { CalendarToolBar } from '../components/Calendar/CalendarToolbar';\nimport { ChoosedMonth } from '../components/Calendar/ChoosedMonth/ChoosedMonth';\nimport { ChoosedDay } from '../components/Calendar/ChoosedDay/ChoosedDay';\nimport { useNavigate } from 'react-router-dom';\nimport { useGetMonthlyTasksQuery } from 'redux/tasks/tasksApi';\nimport css from '../components/Calendar/Caledar.module.css';\nimport {\n  format,\n  startOfWeek,\n  endOfWeek,\n  endOfMonth,\n  addDays,\n  isWithinInterval,\n  eachDayOfInterval,\n  startOfToday,\n  parse,\n} from 'date-fns';\n\nconst CalendarPage = () => {\n  const navigate = useNavigate();\n  let filteredTask;\n\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [isMonthPage, setIsMonthPage] = useState(true);\n  const [tasks, setTasks] = useState(null);\n\n  // day\n  const [currentDay, setCurrentDay] = useState(startOfToday());\n  // month\n  const [currentMonth, setCurrentMonth] = useState(\n    format(startOfToday(), 'MMM-yyyy')\n  );\n  const firstDayCurrentMonth = parse(currentMonth, 'MMM-yyyy', new Date());\n\n  const days = eachDayOfInterval({\n    start: startOfWeek(firstDayCurrentMonth),\n    end: endOfWeek(endOfMonth(firstDayCurrentMonth)),\n  });\n\n  const [currentWeek, setCurrentWeek] = useState({\n    start: startOfWeek(currentDay, { weekStartsOn: 1 }),\n    end: addDays(startOfWeek(currentDay, { weekStartsOn: 1 }), 6),\n  });\n  const week = eachDayOfInterval(currentWeek);\n\n  const isInCurrentWeek = isWithinInterval(currentDay, currentWeek);\n\n  if (!isInCurrentWeek) {\n    const newStartOfWeek = startOfWeek(currentDay, {\n      weekStartsOn: 1,\n    });\n    const newEndOfWeek = addDays(\n      startOfWeek(currentDay, { weekStartsOn: 1 }),\n      6\n    );\n\n    const newCurrentWeek = {\n      start: newStartOfWeek,\n      end: newEndOfWeek,\n    };\n\n    setCurrentWeek(newCurrentWeek);\n  }\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    document.body.style.overflow = 'auto';\n  };\n\n  const { data: allTasks, refetch } = useGetMonthlyTasksQuery(\n    format(currentDay, 'yyyy-MM')\n  );\n\n  useEffect(() => {\n    if (allTasks) {\n      const Tasks = [...allTasks.data];\n\n      refetch();\n      setTasks(Tasks);\n    }\n  }, [allTasks, refetch]);\n\n  /* eslint-disable */\n  useEffect(() => {\n    navigate(`month/${format(currentDay, 'yyyy-MM-dd')}`);\n  }, []);\n  /* eslint-enable */\n\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.key === 'Escape') {\n        handleCloseModal();\n      }\n    };\n\n    if (isModalOpen) {\n      window.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isModalOpen]);\n\n  if (tasks) {\n    const formattedDay = format(currentDay, 'yyyy-MM-dd');\n    filteredTask = tasks.filter(task => task.date === formattedDay);\n  }\n\n  return (\n    <div className={css.calendar}>\n      <CalendarToolBar\n        currentDay={currentDay}\n        setCurrentDay={setCurrentDay}\n        currentMonth={firstDayCurrentMonth}\n        setCurrentMonth={setCurrentMonth}\n        isMonthPage={isMonthPage}\n        setIsMonthPage={setIsMonthPage}\n        week={week}\n      />\n      {isMonthPage ? (\n        <ChoosedMonth\n          currentDay={firstDayCurrentMonth}\n          days={days}\n          setCurrentDay={setCurrentDay}\n          week={week}\n          allTasks={allTasks && allTasks}\n          setTasks={setTasks}\n          setIsMonthPage={setIsMonthPage}\n        />\n      ) : (\n        <ChoosedDay\n          week={week}\n          currentDay={currentDay}\n          setCurrentDay={setCurrentDay}\n          filteredTask={filteredTask && filteredTask}\n        />\n      )}\n      {isModalOpen && <AddTaskModal onClose={handleCloseModal} />}\n    </div>\n  );\n};\n\nexport default CalendarPage;\n","import startOfDay from \"../startOfDay/index.js\";\n/**\n * @name startOfToday\n * @category Day Helpers\n * @summary Return the start of today.\n * @pure false\n *\n * @description\n * Return the start of today.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @returns {Date} the start of today\n *\n * @example\n * // If today is 6 October 2014:\n * const result = startOfToday()\n * //=> Mon Oct 6 2014 00:00:00\n */\nexport default function startOfToday() {\n  return startOfDay(Date.now());\n}"],"names":["PeriodPaginator","_ref","isMonthPage","nextPeriod","prevPeriod","currentMonth","currentDay","currentDate","useParams","parsedCurrentDate","parse","Date","formattedMonth","undefined","formattedDay","_jsxs","className","css","children","_jsx","format","onClick","PeriodPaginatorType","changeType","navigate","useNavigate","concat","add","dirtyDate","duration","requiredArgs","arguments","_typeof","NaN","years","toInteger","months","weeks","days","hours","minutes","seconds","date","toDate","dateWithMonths","addMonths","dateWithDays","addDays","minutesToAdd","secondsToAdd","msToAdd","finalDate","getTime","CalendarToolBar","setIsMonthPage","setCurrentMonth","setCurrentDay","state","_Fragment","parsedDate","firstDayPrevMonth","newDate","prevDay","nextDay","eachDayOfInterval","dirtyInterval","options","_options$step","interval","startDate","start","endDate","end","endTime","RangeError","dates","setHours","step","Number","isNaN","push","setDate","getDate","filteredTask","_useState","useState","_useState2","_slicedToArray","isModalOpen","setModalOpen","_useState3","_useState4","_useState5","_useState6","tasks","setTasks","_useState7","startOfToday","_useState8","_useState9","_useState10","firstDayCurrentMonth","startOfWeek","endOfWeek","endOfMonth","_useState11","weekStartsOn","_useState12","currentWeek","setCurrentWeek","week","isWithinInterval","handleCloseModal","document","body","style","overflow","_useGetMonthlyTasksQu","useGetMonthlyTasksQuery","allTasks","data","refetch","useEffect","Tasks","_toConsumableArray","handleKeyDown","event","key","window","addEventListener","removeEventListener","filter","task","ChoosedMonth","ChoosedDay","AddTaskModal","onClose","startOfDay","now"],"sourceRoot":""}