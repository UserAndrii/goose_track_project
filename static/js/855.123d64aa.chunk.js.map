{"version":3,"file":"static/js/855.123d64aa.chunk.js","mappings":"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","sources":["components/Calendar/PeriodPaginator/PeriodPaginator.jsx","components/Calendar/PeriodPaginatorType/PeriodPaginatorType.jsx","components/Calendar/Calendar.jsx","pages/CalendarPage.jsx"],"sourcesContent":["import css from '../Caledar.module.css';\n\nimport { format } from 'date-fns';\n\nexport const PeriodPaginator = ({\n  currentMonth,\n  isMonthPage,\n  nextMonth,\n  previousMonth,\n}) => {\n  return (\n    <div className={css.toolbar__innerBlock}>\n      <button className={css.toolbar__curerntDate}>\n        {isMonthPage\n          ? format(currentMonth, 'MMMM yyyy')\n          : format(currentMonth, 'd MMMM yyyy')}\n      </button>\n      <div className={css.toggleButtons}>\n        <button className={css.toggleButtons__previous} onClick={previousMonth}>\n          {'<'}\n        </button>\n        <button className={css.toggleButtons__next} onClick={nextMonth}>\n          {'>'}\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { useNavigate } from 'react-router';\nimport css from '../Caledar.module.css';\n\nexport const PeriodPaginatorType = ({\n  isMonthPage,\n  changeType,\n  currentDay,\n}) => {\n  const navigate = useNavigate();\n  return (\n    <div className={css.toolbar__calendarRange}>\n      <button\n        className={`${css.toolbar__buttons} ${css.toolbar__monthButton}`}\n        style={{\n          backgroundColor: isMonthPage\n            ? 'rgba(62, 133, 243, 0.2)'\n            : 'rgba(227, 243, 255, 1)',\n        }}\n        onClick={() => {\n          navigate(`month/${currentDay}`);\n          changeType(true);\n        }}\n      >\n        Month\n      </button>\n      <button\n        className={`${css.toolbar__buttons} ${css.toolbar__dayButton}`}\n        style={{\n          backgroundColor: !isMonthPage\n            ? 'rgba(62, 133, 243, 0.2)'\n            : 'rgba(227, 243, 255, 1)',\n        }}\n        onClick={() => {\n          navigate(`day/${currentDay}`);\n          changeType(false);\n        }}\n      >\n        Day\n      </button>\n    </div>\n  );\n};\n","import css from './Caledar.module.css';\nimport { useState } from 'react';\n\n// import { Outlet, useParams } from 'react-router-dom';\n// import { Suspense } from 'react';\n\n// import { useGetMonthlyTasksQuery } from 'redux/tasks/tasksApi';\n\n// import axios from 'axios';\n\n\nimport {\n  format,\n  startOfWeek,\n  endOfWeek,\n  endOfMonth,\n  addDays,\n  // isSameMonth,\n  // isSameDay,\n  isToday,\n  eachDayOfInterval,\n  startOfToday,\n  parse,\n  add,\n  // addWeeks,\n  // subWeeks,\n  // isBefore,\n  // isEqual,\n  // startOfMonth,\n} from 'date-fns';\n\nimport { useMediaQuery } from 'react-responsive';\nimport { ChoosedMonth } from './ChoosedMonth/ChoosedMonth';\nimport { ChoosedDay } from './ChoosedDay/ChoosedDay';\nimport { PeriodPaginator } from './PeriodPaginator/PeriodPaginator';\nimport { PeriodPaginatorType } from './PeriodPaginatorType/PeriodPaginatorType';\n\nexport const CalendarToolBar = () => {\n  const today = startOfToday();\n\n  const [currentMonth, setCurrentMonth] = useState(format(today, 'MMM-yyyy'));\n  const firstDayCurrentMonth = parse(currentMonth, 'MMM-yyyy', new Date());\n\n  // Current Week\n  const [currentWeek] = useState({\n    start: startOfWeek(today, { weekStartsOn: 1 }),\n    end: addDays(endOfWeek(today, { weekStartsOn: 0 }), 1),\n  });\n  const Week = eachDayOfInterval(currentWeek);\n\n  // Current Day\n  const [currentDay] = useState(format(today, 'yyyy-MM-dd'));\n  // const firstDayCurrentDay = parse(currentDay, 'yyyy-MM-dd', new Date());\n\n  const [isMonthPage, setIsMonthPage] = useState(true);\n  const isTabletOrMobile = useMediaQuery({ query: '(min-width: 768px)' });\n\n  let days = eachDayOfInterval({\n    start: firstDayCurrentMonth,\n    end: endOfMonth(firstDayCurrentMonth),\n  });\n\n  // Months\n  const previousMonth = () => {\n    let firstDayNextMonth = add(firstDayCurrentMonth, { months: -1 });\n    setCurrentMonth(format(firstDayNextMonth, 'MMM-yyyy'));\n  };\n\n  const nextMonth = () => {\n    let firstDayNextMonth = add(firstDayCurrentMonth, { months: 1 });\n    setCurrentMonth(format(firstDayNextMonth, 'MMM-yyyy'));\n  };\n\n  // Weeks\n  // const nextWeek = () => {\n  //   const nextWeekStart = addWeeks(currentWeek.start, 1);\n  //   const nextWeekEnd = addDays(\n  //     endOfWeek(nextWeekStart, { weekStartsOn: 0 }),\n  //     1\n  //   );\n  //   setCurrentWeek({ start: addWeeks(currentWeek.start, 1), end: nextWeekEnd });\n  // };\n\n  // const prevWeek = () => {\n  //   const prevWeekStart = subWeeks(currentWeek.start, 1);\n  //   const prevWeekEnd = addDays(\n  //     endOfWeek(prevWeekStart, { weekStartsOn: 0 }),\n  //     1\n  //   );\n  //   setCurrentWeek({ start: prevWeekStart, end: prevWeekEnd });\n  // };\n\n  // Days\n  // const nextDay = () => {\n  //   // if (isDayInWeek) {\n  //   const dayAfter = add(firstDayCurrentDay, { days: 1 });\n  //   setCurrentDay(format(dayAfter, 'd-MMM-yyyy'));\n  //   // } else {\n  //   //   nextWeek();\n  //   // }\n  // };\n\n  // const previousDay = () => {\n  //   const prevDay = add(firstDayCurrentDay, { days: -1 });\n  //   setCurrentDay(format(prevDay, 'd-MMM-yyyy'));\n  // };\n\n  const changeType = state => {\n    setIsMonthPage(state);\n  };\n\n  const dayNames = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  const abbreviatedDayNames = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n\n  // const {\n  //   data: { data: tasks },\n  // } = useGetMonthlyTasksQuery({ date: date }, { skip: date === '' });\n\n  // const date = '2023-08';\n  // const { data: tasks, isLoading, isError } = useGetMonthlyTasksQuery(date);\n\n  // const getTasks = async () => {\n  //   try {\n  //     const response = await axios.get(\n  //       'https://goose-track-project-back.onrender.com/tasks',\n  //       {\n  //         date: format(firstDayCurrentMonth, 'yyyy-MM'),\n  //         // 2023-08\n  //       }\n  //     );\n  //     console.log('response', response);\n  //   } catch (error) {\n  //     console.log('Error:', error.message);\n  //     throw error;\n  //   }\n  // };\n  // getTasks();\n\n  return (\n    <div className={css.calendar}>\n      <div className={css.toolbar}>\n        <PeriodPaginator\n          currentMonth={firstDayCurrentMonth}\n          isMonthPage={isMonthPage}\n          nextMonth={nextMonth}\n          previousMonth={previousMonth}\n        />\n\n        <PeriodPaginatorType\n          currentDay={currentDay}\n          isMonthPage={isMonthPage}\n          changeType={changeType}\n        />\n      </div>\n\n      <div className={css.mainBlock__dayList}>\n        {isMonthPage ? (\n          <>\n            {Week.map((day, index) => (\n              <span\n                key={day.toString()}\n                className={`${css.day} ${index >= 5 && css.weekend}`}\n              >\n                {isTabletOrMobile\n                  ? dayNames[index]\n                  : abbreviatedDayNames[index]}\n              </span>\n            ))}\n          </>\n        ) : (\n          <>\n            {Week.map((day, index) => (\n              <div className={css.daylist__wrapper} key={day.toString()}>\n                <span className={`${css.day} ${index >= 5 && css.weekend}`}>\n                  {isTabletOrMobile\n                    ? dayNames[index]\n                    : abbreviatedDayNames[index]}\n                </span>\n                <div\n                  className={`${css.row__currentDate} ${\n                    isToday(day) && css.row__currentDateActive\n                  }`}\n                  style={{ position: 'unset', marginTop: 6 }}\n                >\n                  <time\n                    className={`${css.row__number} ${\n                      isToday(day) && css.row__ActiveNumber\n                    }`}\n                    dateTime={format(day, 'yyyy-MM-dd')}\n                  >\n                    {format(day, 'd')}\n                  </time>\n                </div>\n              </div>\n            ))}\n          </>\n        )}\n      </div>\n\n      {/* <Suspense fallback={null}>\n        <Outlet />\n      </Suspense> */}\n\n      {isMonthPage ? (\n        <ChoosedMonth currentDay={firstDayCurrentMonth} days={days} />\n      ) : (\n        <ChoosedDay Week={days} />\n      )}\n    </div>\n  );\n};\n","// import AddFeedbackBtn from 'components/AddFeedbackBtn/AddFeedbackBtn';\nimport { useState, useEffect } from 'react';\nimport AddTaskModal from 'components/AddTaskModal/AddTaskModal';\n// import TasksColumnsList from 'components/TasksColumnsList/TasksColumnsList';\nimport { CalendarToolBar } from '../components/Calendar/Calendar';\n\nconst CalendarPage = () => {\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  // const handleOpenModal = () => {\n  //   setModalOpen(true);\n  //   document.body.style.overflow = 'hidden';\n  // };\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    document.body.style.overflow = 'auto';\n  };\n\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.key === 'Escape') {\n        handleCloseModal();\n      }\n    };\n\n    if (isModalOpen) {\n      window.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isModalOpen]);\n\n  return (\n    <div>\n      <CalendarToolBar />\n      {/* <TasksColumnsList /> */}\n      {isModalOpen && <AddTaskModal onClose={handleCloseModal} />}\n    </div>\n  );\n};\n\nexport default CalendarPage;\n"],"names":["PeriodPaginator","_ref","currentMonth","isMonthPage","nextMonth","previousMonth","_jsxs","className","css","children","_jsx","format","onClick","PeriodPaginatorType","changeType","currentDay","navigate","useNavigate","concat","style","backgroundColor","CalendarToolBar","today","startOfToday","_useState","useState","_useState2","_slicedToArray","setCurrentMonth","firstDayCurrentMonth","parse","Date","_useState3","start","startOfWeek","weekStartsOn","end","addDays","endOfWeek","currentWeek","Week","eachDayOfInterval","_useState5","_useState7","_useState8","setIsMonthPage","isTabletOrMobile","useMediaQuery","query","days","endOfMonth","dayNames","abbreviatedDayNames","firstDayNextMonth","add","months","state","_Fragment","map","day","index","toString","isToday","position","marginTop","dateTime","ChoosedMonth","ChoosedDay","isModalOpen","setModalOpen","handleCloseModal","document","body","overflow","useEffect","handleKeyDown","event","key","window","addEventListener","removeEventListener","AddTaskModal","onClose"],"sourceRoot":""}