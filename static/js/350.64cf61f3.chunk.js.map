{"version":3,"file":"static/js/350.64cf61f3.chunk.js","mappings":"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","sources":["components/Calendar/PeriodPaginator/PeriodPaginator.styled.jsx","components/Calendar/PeriodPaginator/PeriodPaginator.jsx","components/StatisticsChart/StatisticsChart.jsx","components/StatisticsChart/StatisticsChart.styled.jsx","pages/StatisticsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst InnerBlock = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n\n  @media screen and (min-width: 768px) {\n    justify-content: start;\n  }\n`;\n\nconst CurrentDate = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 8px 12px;\n  width: 190px;\n  height: 30px;\n  color: #fff;\n  background-color: #3e85f3;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 18px;\n  text-transform: uppercase;\n\n  @media screen and (min-width: 768px) {\n    height: 34px;\n    margin-right: 8px;\n    font-size: 16px;\n  }\n`;\n\nconst ToggleButtons = styled.div`\n  display: block;\n`;\n\nconst ToggleButton = styled.button`\n  display: inline-block;\n  width: 32px;\n  height: 30px;\n  padding: 8px 12px;\n  background-color: #fff;\n  color: black;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    width: 40px;\n    height: 34px;\n  }\n\n  &:hover {\n    background-color: rgba(136, 165, 191, 0.48);\n  }\n\n  &:first-of-type {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n  }\n\n  &:last-child {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n  }\n`;\n\nexport { InnerBlock, CurrentDate, ToggleButtons, ToggleButton };\n","import { useParams } from 'react-router-dom';\nimport {\n  InnerBlock,\n  CurrentDate,\n  ToggleButtons,\n  ToggleButton,\n} from './PeriodPaginator.styled';\nimport { format, parse } from 'date-fns';\n\nconst PeriodPaginator = ({\n  isMonthPage,\n  nextPeriod,\n  prevPeriod,\n  currentMonth,\n  currentDay,\n}) => {\n  const { currentDate } = useParams();\n  const parsedCurrentDate = parse(currentDate, 'yyyy-MM-dd', new Date());\n\n  const formattedMonth =\n    currentDate === undefined ? currentMonth : parsedCurrentDate;\n\n  const formattedDay =\n    currentDate === undefined ? currentDay : parsedCurrentDate;\n\n  return (\n    <InnerBlock>\n      <CurrentDate>\n        {isMonthPage\n          ? format(formattedMonth, 'MMMM yyyy')\n          : format(formattedDay, 'd MMMM yyyy')}\n      </CurrentDate>\n      <ToggleButtons>\n        <ToggleButton onClick={prevPeriod}>{'<'}</ToggleButton>\n        <ToggleButton onClick={nextPeriod}>{'>'}</ToggleButton>\n      </ToggleButtons>\n    </InnerBlock>\n  );\n};\n\nexport default PeriodPaginator;\n","import React, { useEffect, useState } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  LabelList,\n  Label,\n} from 'recharts';\n\nimport { useGetMonthlyTasksQuery } from 'redux/tasks/tasksApi';\n\nfunction CustomBar(props) {\n  const { x, y, width, height, borderRadius } = props;\n\n  return (\n    <g>\n      <rect\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        fill=\"url(#pvGradient)\"\n        rx={borderRadius}\n        ry={borderRadius}\n      />\n    </g>\n  );\n}\n\nfunction CustomBar1(props) {\n  const { x, y, width, height, borderRadius } = props;\n\n  return (\n    <g>\n      <rect\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        fill=\"url(#uvGradient)\"\n        rx={borderRadius}\n        ry={borderRadius}\n      />\n    </g>\n  );\n}\nconst renderCustomizedLabel = props => {\n  const { x, y, width, value, lineHeight, fontSize } = props;\n  const radius = 10;\n\n  return (\n    <g>\n      <text\n        x={x + width / 2}\n        y={y - radius}\n        fill=\"#343434\"\n        textAnchor=\"middle\"\n        dominantBaseline=\"middle\"\n        fontSize={fontSize}\n        fontStyle={'normal'}\n        fontWeight={500}\n        fontFamily=\"Poppins\"\n        lineheight={lineHeight}\n      >\n        {value}%\n      </text>\n    </g>\n  );\n};\nconst data = [\n  {\n    name: 'To Do',\n    uv: 0,\n    pv: 0,\n  },\n  {\n    name: 'In Progress',\n    uv: 0,\n    pv: 0,\n  },\n  {\n    name: 'Done',\n    uv: 0,\n    pv: 0,\n  },\n];\nexport default function StatisticsChart({ currentDay, currentMonth }) {\n  const [chartWidth, setChartWidth] = useState(860);\n  const [chartHeight, setChartHeight] = useState(440);\n  const [sizeBar, setSizeBar] = useState(27);\n  const [padChart, setPadChart] = useState(40);\n  const [padTopChart, setPadTopChart] = useState(40);\n  const [padBottomChart, setPadBottomChart] = useState(40);\n  const [fontSize, setFontSize] = useState(16);\n  const [lineHeight, setLineHeight] = useState(18);\n  const [fontSizeL, setFontSizeL] = useState(14);\n  const [lineHeightL, setLineHeightL] = useState(21);\n  const [dataChart, setDataChart] = useState(data);\n  const { data: allTasks, refetch } = useGetMonthlyTasksQuery(currentMonth);\n\n  useEffect(() => {\n    refetch();\n    if (allTasks) {\n      const tasks = [...allTasks.data];\n      if (tasks && tasks.length > 0) {\n        const data = [\n          {\n            name: 'To Do',\n            uv:\n              tasks.length === 0\n                ? 0\n                : Math.ceil(\n                    (tasks.filter(task => task.category === 'TODO').length /\n                      tasks.length) *\n                      100\n                  ),\n            pv:\n              tasks.filter(task => task.date === currentDay).length === 0\n                ? 0\n                : Math.ceil(\n                    (tasks.filter(\n                      task =>\n                        task.category === 'TODO' && task.date === currentDay\n                    ).length /\n                      tasks.filter(task => task.date === currentDay).length) *\n                      100\n                  ),\n          },\n          {\n            name: 'In Progress',\n            uv:\n              tasks.length === 0\n                ? 0\n                : Math.ceil(\n                    (tasks.filter(task => task.category === 'INPROGRESS')\n                      .length /\n                      tasks.length) *\n                      100\n                  ),\n            pv:\n              tasks.filter(task => task.date === currentDay).length === 0\n                ? 0\n                : Math.ceil(\n                    (tasks.filter(\n                      task =>\n                        task.category === 'INPROGRESS' &&\n                        task.date === currentDay\n                    ).length /\n                      tasks.filter(task => task.date === currentDay).length) *\n                      100\n                  ),\n          },\n          {\n            name: 'Done',\n            uv:\n              tasks.length === 0\n                ? 0\n                : Math.ceil(\n                    (tasks.filter(task => task.category === 'DONE').length /\n                      tasks.length) *\n                      100\n                  ),\n            pv:\n              tasks.filter(task => task.date === currentDay).length === 0\n                ? 0\n                : Math.ceil(\n                    (tasks.filter(\n                      task =>\n                        task.category === 'DONE' && task.date === currentDay\n                    ).length /\n                      tasks.filter(task => task.date === currentDay).length) *\n                      100\n                  ),\n          },\n        ];\n        setDataChart(data);\n      } else setDataChart(data);\n    }\n  }, [allTasks, currentDay, refetch]);\n  useEffect(() => {\n    function handleResize() {\n      const screenWidth = window.innerWidth;\n      if (screenWidth <= 375) {\n        setChartWidth(307);\n        setChartHeight(418);\n        setSizeBar(22);\n        setPadChart(14);\n        setPadTopChart(80);\n        setPadBottomChart(40);\n        setFontSize('12px');\n        setLineHeight('16px');\n        setFontSizeL('12px');\n        setLineHeightL('16px');\n      } else if (screenWidth <= 768) {\n        setChartWidth(307);\n        setChartHeight(418);\n        setSizeBar(22);\n        setPadChart(14);\n        setPadTopChart(80);\n        setPadBottomChart(40);\n        setFontSize('12px');\n        setLineHeight('16px');\n        setFontSizeL('12px');\n        setLineHeightL('16px');\n      } else if (screenWidth < 1440) {\n        setChartWidth(640);\n        setChartHeight(424);\n        setSizeBar(27);\n        setPadChart(32);\n        setPadTopChart(64);\n        setPadBottomChart(32);\n        setFontSize('16px');\n        setLineHeight('18px');\n        setFontSizeL('14px');\n        setLineHeightL('21px');\n      } else {\n        setChartWidth(860);\n        setChartHeight(440);\n        setSizeBar(27);\n        setPadChart(40);\n        setPadTopChart(80);\n        setPadBottomChart(40);\n        setFontSize('16px');\n        setLineHeight('18px');\n        setFontSizeL('14px');\n        setLineHeightL('21px');\n      }\n    }\n\n    handleResize();\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  return (\n    <BarChart\n      width={chartWidth}\n      height={chartHeight}\n      data={dataChart}\n      margin={{\n        top: padTopChart,\n        right: padChart,\n        left: padChart,\n        bottom: padBottomChart,\n      }}\n      style={{\n        border: '0.8px solid #E3F3FF',\n        borderRadius: 16,\n      }}\n    >\n      <CartesianGrid\n        strokeDasharray=\"0 0\"\n        vertical={false}\n        stroke={'#E3F3FF'}\n        horizontal={{\n          strokeWidth: 1,\n        }}\n      />\n\n      <XAxis\n        dataKey=\"name\"\n        axisLine={false}\n        tickLine={false}\n        tick={{ dy: 19 }}\n        style={{\n          color: '#343434',\n\n          fontSize: '14px',\n\n          fontWeight: 400,\n          lineHeight: '21px',\n        }}\n      />\n      <YAxis\n        axisLine={false}\n        tickLine={false}\n        domain={[0, 100]}\n        tick={{\n          dx: -padChart,\n          color: '#343434',\n          fontSize: '14px',\n          fontWeight: 400,\n          lineHeight: '150%',\n        }}\n      >\n        <Label\n          value=\"Tasks\"\n          position=\"top\"\n          dx={-25}\n          dy={-24}\n          style={{\n            color: '#343434',\n            fontSize: fontSizeL,\n            fontWeight: 600,\n            lineHeight: lineHeightL,\n          }}\n        />\n      </YAxis>\n\n      <Bar\n        dataKey=\"pv\"\n        fill=\"none\"\n        shape={<CustomBar borderRadius={8} />}\n        barSize={sizeBar}\n        style={{ zIndex: 2 }}\n      >\n        <LabelList\n          dataKey=\"pv\"\n          content={renderCustomizedLabel}\n          lineheight={lineHeight}\n          fontSize={fontSize}\n        />\n      </Bar>\n      <Bar\n        dataKey=\"uv\"\n        barSize={sizeBar}\n        fill=\"none\"\n        style={{ zIndex: 2, borderTopLeftRadius: 0, borderTopRightRadius: 0 }}\n        shape={<CustomBar1 borderRadius={8} />}\n      >\n        <LabelList\n          dataKey=\"uv\"\n          content={renderCustomizedLabel}\n          lineheight={lineHeight}\n          fontSize={fontSize}\n        />\n      </Bar>\n      <defs>\n        <linearGradient id=\"pvGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop offset=\"0%\" stopColor=\"rgba(255, 210, 221, 0)\" />\n          <stop offset=\"100%\" stopColor=\"#FFD2DD\" />\n        </linearGradient>\n        <linearGradient id=\"uvGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop offset=\"0%\" stopColor=\"rgba(62, 133, 243, 0)\" />\n          <stop offset=\"100%\" stopColor=\"#3E85F3\" />\n        </linearGradient>\n      </defs>\n    </BarChart>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 1057px;\n  height: 100%;\n  box-sizing: border-box;\n  background-color: var(--main-background-color);\n  border-radius: 16px;\n  padding: 0 114px;\n  padding-top: 134px;\n  padding-bottom: auto;\n\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n\n  @media (max-width: 375px) {\n    max-width: 335px;\n    height: 100%;\n    margin: 0 auto;\n    padding: 0 14px;\n    padding-top: 28px;\n    padding-bottom: auto;\n  }\n\n  @media screen and (min-width: 376px) and (max-width: 767px) {\n    width: 335px;\n    height: 100%;\n    padding: 0 14px;\n    padding-top: 28px;\n    padding-bottom: auto;\n  }\n\n  @media screen and (min-width: 768px) and (max-width: 1439px) {\n    width: 704px;\n    height: 100%;\n    padding: 0 32px;\n    padding-top: 140px;\n    padding-bottom: auto;\n  }\n`;\n\nexport const WrapPeriod = styled.div`\n  width: 860px;\n  display: flex;\n  margin-bottom: 40px;\n  padding: 0 40px;\n\n  @media (max-width: 375px) {\n    max-width: 307px;\n    height: auto;\n    flex-direction: column;\n    padding: 0;\n  }\n\n  @media screen and (min-width: 376px) and (max-width: 767px) {\n    width: 307px;\n    flex-direction: column;\n    padding: 0;\n  }\n\n  @media screen and (min-width: 768px) and (max-width: 1439px) {\n    width: 640px;\n    padding: 0 32px;\n  }\n`;\n\nexport const WrapLabels = styled.div`\n  display: flex;\n  width: 179px;\n\n  @media (max-width: 375px) {\n    max-width: 158;\n    height: auto;\n    margin-top: 20px;\n  }\n  @media screen and (min-width: 376px) and (max-width: 767px) {\n    margin-top: 20px;\n  }\n`;\n\nexport const WrapLabel = styled.div`\n  width: 90px;\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n\n  // justify-content: center;\n  // align-items: center;\n  // margin: 0 auto;\n\n  @media (max-width: 375px) {\n    margin-right: 14px;\n  }\n\n  @media screen and (min-width: 376px) and (max-width: 767px) {\n    margin-right: 14px;\n  }\n`;\n\nexport const Circle = styled.div`\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n`;\nexport const LabelT = styled.p`\n  color: var(--calendar-date-color);\n  font-family: Poppins, sans-serif;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 18px;\n  @media (max-width: 375px) {\n    font-size: 14px;\n  }\n\n  @media screen and (min-width: 376px) and (max-width: 767px) {\n    font-size: 14px;\n  }\n`;\n","import PeriodPaginator from 'components/Calendar/PeriodPaginator/PeriodPaginator';\nimport StatisticsChart from 'components/StatisticsChart/StatisticsChart';\nimport {\n  Circle,\n  Container,\n  LabelT,\n  WrapLabel,\n  WrapLabels,\n  WrapPeriod,\n} from 'components/StatisticsChart/StatisticsChart.styled';\nimport {\n  addDays,\n  addMonths,\n  endOfMonth,\n  format,\n  startOfToday,\n  subDays,\n  subMonths,\n} from 'date-fns';\n\nimport { useState } from 'react';\n\nconst StatisticsPage = () => {\n  const [currentDay, setCurrentDay] = useState(startOfToday());\n  const [currentMonth, setCurrentMonth] = useState(currentDay);\n  const next = () => {\n    const nextDay = addDays(currentDay, 1);\n    if (nextDay.getDate() === 1) {\n      setCurrentMonth(addMonths(currentMonth, 1));\n    }\n    setCurrentDay(nextDay);\n  };\n\n  const previous = () => {\n    const previousDay = subDays(currentDay, 1);\n    if (\n      previousDay.getDate() === endOfMonth(subMonths(currentMonth, 1)).getDate()\n    ) {\n      setCurrentMonth(subMonths(currentMonth, 1));\n    }\n    setCurrentDay(previousDay);\n  };\n  return (\n    <Container>\n      <WrapPeriod>\n        <PeriodPaginator\n          currentDay={currentDay}\n          isMonthPage={false}\n          nextPeriod={next}\n          prevPeriod={previous}\n        />\n\n        <WrapLabels>\n          <WrapLabel>\n            <Circle\n              style={{\n                backgroundColor: '#FFD2DD',\n                marginRight: '8px',\n              }}\n            />\n            <LabelT>By Day</LabelT>\n          </WrapLabel>\n          <WrapLabel>\n            <Circle\n              style={{\n                backgroundColor: '#3E85F3',\n                marginRight: '8px',\n              }}\n            />\n            <LabelT>By Month</LabelT>\n          </WrapLabel>\n        </WrapLabels>\n      </WrapPeriod>\n      <StatisticsChart\n        currentDay={format(currentDay, 'yyyy-MM-dd')}\n        currentMonth={format(currentMonth, 'yyyy-MM')}\n      />\n    </Container>\n  );\n};\n\nexport default StatisticsPage;\n"],"names":["InnerBlock","styled","_templateObject","_taggedTemplateLiteral","CurrentDate","_templateObject2","ToggleButtons","_templateObject3","ToggleButton","_templateObject4","_ref","isMonthPage","nextPeriod","prevPeriod","currentMonth","currentDay","currentDate","useParams","parsedCurrentDate","parse","Date","formattedMonth","undefined","formattedDay","_jsxs","children","_jsx","format","onClick","CustomBar","props","x","y","width","height","borderRadius","fill","rx","ry","CustomBar1","renderCustomizedLabel","value","lineHeight","fontSize","textAnchor","dominantBaseline","fontStyle","fontWeight","fontFamily","lineheight","data","name","uv","pv","StatisticsChart","_useState","useState","_useState2","_slicedToArray","chartWidth","setChartWidth","_useState3","_useState4","chartHeight","setChartHeight","_useState5","_useState6","sizeBar","setSizeBar","_useState7","_useState8","padChart","setPadChart","_useState9","_useState10","padTopChart","setPadTopChart","_useState11","_useState12","padBottomChart","setPadBottomChart","_useState13","_useState14","setFontSize","_useState15","_useState16","setLineHeight","_useState17","_useState18","fontSizeL","setFontSizeL","_useState19","_useState20","lineHeightL","setLineHeightL","_useState21","_useState22","dataChart","setDataChart","_useGetMonthlyTasksQu","useGetMonthlyTasksQuery","allTasks","refetch","useEffect","tasks","_toConsumableArray","length","Math","ceil","filter","task","category","date","handleResize","screenWidth","window","innerWidth","addEventListener","removeEventListener","BarChart","margin","top","right","left","bottom","style","border","CartesianGrid","strokeDasharray","vertical","stroke","horizontal","strokeWidth","XAxis","dataKey","axisLine","tickLine","tick","dy","color","YAxis","domain","dx","Label","position","Bar","shape","barSize","zIndex","LabelList","content","borderTopLeftRadius","borderTopRightRadius","id","x1","y1","x2","y2","offset","stopColor","Container","WrapPeriod","WrapLabels","WrapLabel","Circle","_templateObject5","LabelT","_templateObject6","startOfToday","setCurrentDay","setCurrentMonth","PeriodPaginator","nextDay","addDays","getDate","addMonths","previousDay","subDays","endOfMonth","subMonths","backgroundColor","marginRight"],"sourceRoot":""}