{"version":3,"file":"static/js/56.a159c31d.chunk.js","mappings":"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","sources":["components/AuthNavigate/AuthNavigate.styled.jsx","components/AuthNavigate/AuthNavigate.jsx","components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Wrapper = styled.div`\n  text-align: center;\n`;\n\nexport const Text = styled.p`\n  color: #111111;\n  text-shadow: 0px 9.399999618530273px 57.6875px rgba(0, 0, 0, 0.04),\n    0px 47px 355px rgba(0, 0, 0, 0.07);\n  font-size: 12px;\n  font-weight: 600;\n  line-height: 1.15;\n  margin-bottom: 10px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n\nexport const LinkTo = styled(Link)`\n  color: #3e85f3;\n  text-shadow: 0px 9.399999618530273px 57.6875px rgba(0, 0, 0, 0.04),\n    0px 47px 355px rgba(0, 0, 0, 0.07);\n  font-size: 12px;\n  font-weight: 600;\n  line-height: 1.15;\n  cursor: pointer;\n\n  &:hover {\n    text-decoration: underline;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { LinkTo, Wrapper, Text } from './AuthNavigate.styled';\n\nconst AuthNavigate = () => {\n  const { pathname } = useLocation();\n  const [activePageQuestions, setActivePageQuestions] = useState('');\n\n  useEffect(() => {\n    switch (pathname) {\n      case '/login':\n        return setActivePageQuestions(\"Don't have an account?\");\n\n      case '/register':\n        return setActivePageQuestions('Already have an account?');\n\n      default:\n        setActivePageQuestions('');\n        return;\n    }\n  }, [pathname]);\n\n  return pathname === '/login' ? (\n    <Wrapper>\n      <Text>\n        {activePageQuestions} <LinkTo to=\"/register\">Sign Up</LinkTo>\n      </Text>\n      <LinkTo to=\"/recover\">Forgot password?</LinkTo>\n    </Wrapper>\n  ) : (\n    <Wrapper>\n      <Text>\n        {activePageQuestions} <LinkTo to=\"/login\">Log In</LinkTo>\n      </Text>\n    </Wrapper>\n  );\n};\n\nexport default AuthNavigate;\n","import styled from '@emotion/styled';\nimport { FiLogIn } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport { MdErrorOutline } from 'react-icons/md';\nimport { IoCheckmarkDoneCircleOutline } from 'react-icons/io5';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  min-height: 100vh;\n  min-width: 100%;\n  background: #dcebf7;\n`;\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const FormName = styled.h1`\n  color: #3e85f3;\n  text-shadow: 0px 9.4px 57px rgba(0, 0, 0, 0.04),\n    0px 47px 355px rgba(0, 0, 0, 0.07);\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 24px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 24px;\n  }\n`;\n\nexport const InputGroupe = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n  gap: 32px;\n\n  padding: 40px 24px;\n  border-radius: 8px;\n  background: #fff;\n\n  @media screen and (max-width: 375px) {\n    max-width: 335px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 480px;\n    padding: 40px;\n  }\n`;\n\nexport const InputList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 24px;\n  background: #fff;\n`;\n\nexport const InputWrapper = styled.li`\n  display: flex;\n  flex-direction: column;\n\n  Input::placeholder {\n    color: #858688;\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 18px;\n    background-color: #ffffff;\n  }\n  @media (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n\nexport const InputWrapperWithIcon = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 8px;\n  position: relative;\n  Input::placeholder {\n    color: #858688;\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 18px;\n    background-color: #ffffff;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 100%;\n  padding-top: 14px;\n  padding-bottom: 14px;\n  gap: 10px;\n\n  border-radius: 16px;\n  background: #3e85f3;\n  border: none;\n  box-shadow: 4px 2px 16px 0px rgba(136, 165, 191, 0.48);\n  cursor: pointer;\n\n  @media screen and (min-width: 375px) {\n    width: 287px;\n    padding: 14px 103px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 400px;\n    padding: 16px 152px;\n  }\n`;\n\nexport const ButtonText = styled.span`\n  white-space: nowrap;\n  color: #ffffff;\n  font-family: inherit;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 1.29;\n  letter-spacing: -0.28px;\n`;\n\nexport const ItemIcon = styled(FiLogIn)`\n  width: 18px;\n  height: 18px;\n  flex-shrink: 0;\n  color: #ffffff;\n`;\n\nexport const ShowHideButton = styled.button`\n  position: absolute;\n  right: 30px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: none;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n`;\n\nexport const LinksContainer = styled.nav`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  align-items: center;\n  margin-top: 18px;\n  gap: 18px;\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 8px;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 600;\n  color: #111111;\n\n  @media screen and (min-width: 768px) {\n    font-size: 14px;\n  }\n  &.valid-input {\n    color: #3cbc81;\n  }\n\n  &.invalid-input {\n    color: #ff0000;\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: #111111;\n  }\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 100%;\n  height: 46px;\n  padding: 14px;\n\n  border-radius: 8px;\n  padding: 14px;\n  border: 1px solid rgba(220, 227, 229, 0.6);\n  background: ${props =>\n    props.isPassword || props.isEmail ? '#FFFFFF' : 'none'};\n  outline: none;\n\n  &.valid-input {\n    border: 1px solid #3cbc81;\n  }\n\n  &.invalid-input {\n    border: 1px solid #ff0000;\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    border: 1px solid #111111;\n  }\n\n  @media screen and (min-width: 375px) {\n    width: 287px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 400px;\n    height: 54px;\n    padding: 18px;\n  }\n`;\n\nexport const Error = styled.div`\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 14px;\n  margin-top: 8px;\n  margin-left: 18px;\n\n  &.valid {\n    color: #3cbc81;\n  }\n\n  &.invalid {\n    color: #ff0000;\n  }\n`;\n\nexport const LinkTo = styled(Link)`\n  color: #3e85f3;\n  font-size: 16px;\n  line-height: 14px;\n  text-decoration: none;\n  cursor: pointer;\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nexport const SuccessIcon = styled(IoCheckmarkDoneCircleOutline)`\n  position: absolute;\n  right: 12px;\n  bottom: 22px;\n  width: 18px;\n  height: 18px;\n  color: #3cbc81;\n\n  @media screen and (min-width: 768px) {\n    bottom: 27px;\n  }\n`;\n\nexport const ErrorIcon = styled(MdErrorOutline)`\n  position: absolute;\n  right: 12px;\n  bottom: 37px;\n  width: 18px;\n  height: 18px;\n  color: #ff0000;\n\n  @media screen and (min-width: 768px) {\n    bottom: 41px;\n  }\n`;\n\nexport const ContainerErrorIcon = styled.div`\n  position: relative;\n`;\n\nexport const PictureWrapper = styled.div`\n  display: ${props => (props.hide ? 'block' : 'none')};\n  position: absolute;\n  bottom: 19px;\n  right: 60px;\n\n  width: 368px;\n  height: 521px;\n\n  @media screen and (min-width: 1440px) {\n    display: ${props => (props.hide ? 'none' : 'block')};\n  }\n`;\n","import React from 'react';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  Container,\n  StyledForm,\n  InputGroupe,\n  LinksContainer,\n  FormName,\n  InputWrapper,\n  Button,\n  ButtonText,\n  ItemIcon,\n  Label,\n  Input,\n  ShowHideButton,\n  InputWrapperWithIcon,\n  InputList,\n  Error,\n  ErrorIcon,\n  ContainerErrorIcon,\n  PictureWrapper,\n  SuccessIcon,\n} from './LoginForm.styled';\nimport { FiEye, FiEyeOff } from 'react-icons/fi';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { useNavigate } from 'react-router-dom';\n\nimport loginElements from 'images/login-elements.png';\nimport loginElementsRetina from 'images/login-elements@2x.png';\nimport AuthNavigate from 'components/AuthNavigate/AuthNavigate';\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  // const [isSuccess, setIsSuccess] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const emailRegexp =\n    /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/;\n\n  const validationSchema = yup.object({\n    email: yup\n      .string()\n      .matches(emailRegexp, 'Invalid email')\n      .required('This field is required'),\n    password: yup\n      .string()\n      .min(6, 'Password must be at least 6 characters')\n      .required('This field is required'),\n  });\n\n  // const handleChange = event => {\n  //   event.preventDefault();\n  //   const { name, value } = event.currentTarget;\n\n  //   switch (name) {\n  //     case 'email':\n  //       formik.setFieldValue('email', value);\n  //       break;\n\n  //     case 'password':\n  //       formik.setFieldValue('password', value);\n  //       break;\n\n  //     default:\n  //       break;\n  //   }\n  // };\n\n  // const handleBlur = event => {\n  //   event.preventDefault();\n  //   const { name, value } = event.currentTarget;\n\n  //   switch (name) {\n  //     case 'name':\n  //       try {\n  //         validationSchema.fields.name.validateSync(value);\n  //         //поставити рамку зелену\n  //       } catch (error) {\n  //         //поставити рамку червону\n  //       }\n  //       break;\n\n  //     case 'email':\n  //       formik.validateField('email');\n  //       break;\n\n  //     case 'password':\n  //       formik.validateField('password');\n  //       break;\n\n  //     default:\n  //       break;\n  //   }\n  // };\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: validationSchema,\n\n    onSubmit: async values => {\n      try {\n        const formData = {\n          email: values.email,\n          password: values.password,\n        };\n        const response = await dispatch(logIn(formData));\n        if (response.payload.message === 'success') {\n          // setIsSuccess(true);\n          formik.resetForm();\n          navigate('/calendar');\n        }\n        return response;\n      } catch (error) {\n        console.error('An error occurred:', error);\n      }\n    },\n  });\n\n  return (\n    <Container>\n      <StyledForm onSubmit={formik.handleSubmit}>\n        <InputGroupe>\n          <FormName>Log In</FormName>\n          <InputList>\n            <InputWrapper isEmail={'email'}>\n              <Label\n                htmlFor=\"email\"\n                className={\n                  formik.touched.email\n                    ? formik.errors.email\n                      ? 'invalid-input'\n                      : 'valid-input'\n                    : ''\n                }\n              >\n                Email\n              </Label>\n              <Input\n                type=\"text\"\n                name=\"email\"\n                id=\"email\"\n                autoComplete=\"true\"\n                value={formik.values.email}\n                placeholder=\"Enter email\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                className={\n                  formik.touched.email\n                    ? formik.errors.email\n                      ? 'invalid-input'\n                      : 'valid-input'\n                    : ''\n                }\n              />\n              {formik.touched.email ? (\n                formik.errors.email ? (\n                  <ContainerErrorIcon>\n                    <Error className=\"invalid\">{formik.errors.email}</Error>\n                    <ErrorIcon />\n                  </ContainerErrorIcon>\n                ) : (\n                  <ContainerErrorIcon>\n                    <Error className=\"valid\">{formik.errors.email}</Error>\n                    <SuccessIcon />\n                  </ContainerErrorIcon>\n                )\n              ) : null}\n            </InputWrapper>\n            <InputWrapper isPassword={'password'}>\n              <Label\n                htmlFor=\"password\"\n                className={\n                  formik.touched.password\n                    ? formik.errors.password\n                      ? 'invalid-input'\n                      : 'valid-input'\n                    : ''\n                }\n              >\n                Password\n              </Label>\n              <InputWrapperWithIcon>\n                <Input\n                  type={showPassword ? 'text' : 'password'}\n                  name=\"password\"\n                  id=\"password\"\n                  autocomplete=\"current-password\"\n                  value={formik.values.password}\n                  placeholder=\"Enter password\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  className={\n                    formik.touched.password\n                      ? formik.errors.password\n                        ? 'invalid-input'\n                        : 'valid-input'\n                      : ''\n                  }\n                />\n                {!formik.errors.password && (\n                  <ShowHideButton\n                    type=\"button\"\n                    onClick={() => setShowPassword(show => !show)}\n                  >\n                    {showPassword ? <FiEyeOff /> : <FiEye />}\n                  </ShowHideButton>\n                )}\n              </InputWrapperWithIcon>\n              {formik.touched.password ? (\n                formik.errors.password ? (\n                  <ContainerErrorIcon>\n                    <Error className=\"invalid\">{formik.errors.password}</Error>\n                    <ErrorIcon />\n                  </ContainerErrorIcon>\n                ) : (\n                  <ContainerErrorIcon>\n                    <Error className=\"valid\">{formik.errors.password}</Error>\n                    <SuccessIcon />\n                  </ContainerErrorIcon>\n                )\n              ) : null}\n            </InputWrapper>\n          </InputList>\n          <Button type=\"submit\">\n            <ButtonText>Log in</ButtonText>\n            <ItemIcon />\n          </Button>\n        </InputGroupe>\n        <LinksContainer>\n          <AuthNavigate\n            forgotPasswordText=\"Recover password\"\n            alreadyRegisteredText=\"New user?\"\n            forgotPasswordLink=\"/recover\"\n            alreadyRegisteredLink=\"/register\"\n          />\n        </LinksContainer>\n      </StyledForm>\n      <PictureWrapper>\n        <picture>\n          <source\n            type=\"image/png\"\n            media=\"(min-width: 1440px)\"\n            srcSet={`${loginElements} 1x, ${loginElementsRetina} 2x`}\n          />\n          <img\n            src={`${loginElements}`}\n            alt=\"Let go of the past and focus on the present\"\n            width={368}\n            height={521}\n          />\n        </picture>\n      </PictureWrapper>\n    </Container>\n  );\n};\n\nexport default LoginForm;\n","import React from \"react\";\nimport LoginForm from \"components/LoginForm/LoginForm\";\n\nconst LoginPage = () => {\n  return  <>\n  <LoginForm />\n</>\n};\n\nexport default LoginPage;\n"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","Text","_templateObject2","LinkTo","Link","_templateObject3","pathname","useLocation","_useState","useState","_useState2","_slicedToArray","activePageQuestions","setActivePageQuestions","useEffect","_jsxs","children","_jsx","to","Container","StyledForm","FormName","InputGroupe","_templateObject4","InputList","_templateObject5","InputWrapper","_templateObject6","InputWrapperWithIcon","_templateObject7","Button","_templateObject8","ButtonText","_templateObject9","ItemIcon","FiLogIn","_templateObject10","ShowHideButton","_templateObject11","LinksContainer","_templateObject12","Label","_templateObject13","Input","_templateObject14","props","isPassword","isEmail","Error","_templateObject15","SuccessIcon","_templateObject16","IoCheckmarkDoneCircleOutline","_templateObject17","ErrorIcon","MdErrorOutline","_templateObject18","ContainerErrorIcon","_templateObject19","PictureWrapper","_templateObject20","hide","dispatch","useDispatch","navigate","useNavigate","showPassword","setShowPassword","validationSchema","yup","email","matches","required","password","min","formik","useFormik","initialValues","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","formData","response","wrap","_context","prev","next","logIn","sent","payload","message","resetForm","abrupt","t0","console","error","stop","_x","apply","arguments","handleSubmit","htmlFor","className","touched","errors","type","name","id","autoComplete","value","placeholder","onChange","handleChange","onBlur","handleBlur","autocomplete","onClick","show","FiEyeOff","FiEye","AuthNavigate","forgotPasswordText","alreadyRegisteredText","forgotPasswordLink","alreadyRegisteredLink","media","srcSet","concat","loginElements","loginElementsRetina","src","alt","width","height","_Fragment","LoginForm"],"sourceRoot":""}