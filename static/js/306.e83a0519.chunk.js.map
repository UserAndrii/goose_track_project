{"version":3,"file":"static/js/306.e83a0519.chunk.js","mappings":"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","sources":["components/Calendar/PeriodPaginator/PeriodPaginator.styled.jsx","components/Calendar/PeriodPaginator/PeriodPaginator.jsx","components/StatisticsChart/StatisticsChart.jsx","components/StatisticsChart/StatisticsChart.styled.jsx","pages/StatisticsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst InnerBlock = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n\n  @media screen and (min-width: 768px) {\n    justify-content: start;\n  }\n`;\nconst CurrentDateWrapper = styled.div`\n  width: 190px;\n  height: 30px;\n\n  border: none;\n  border-radius: 8px;\n\n  @media screen and (min-width: 768px) {\n    height: 34px;\n    margin-right: 8px;\n  }\n`;\n\nconst CurrentDate = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 8px 12px;\n  width: 190px;\n  height: 30px;\n  color: #fff;\n  background-color: #3e85f3;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 18px;\n  text-transform: uppercase;\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    height: 34px;\n    // margin-right: 8px;\n    font-size: 16px;\n  }\n`;\n\nconst ToggleButtons = styled.div`\n  display: block;\n`;\n\nconst ToggleButton = styled.button`\n  display: inline-block;\n  width: 32px;\n  height: 30px;\n  padding: 8px 12px;\n  background-color: var(--background-button-day);\n  color: var(--feedback-form-text-input);\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  border: 1px solid var(--calendartable-border-color);\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    width: 40px;\n    height: 34px;\n  }\n\n  &:hover {\n    background-color: rgba(136, 165, 191, 0.48);\n  }\n\n  &:first-of-type {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n  }\n\n  &:last-child {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n  }\n`;\n\nexport {\n  InnerBlock,\n  CurrentDate,\n  ToggleButtons,\n  ToggleButton,\n  CurrentDateWrapper,\n};\n","import { useParams } from 'react-router-dom';\nimport {\n  InnerBlock,\n  CurrentDate,\n  ToggleButtons,\n  ToggleButton,\n  CurrentDateWrapper,\n} from './PeriodPaginator.styled';\nimport { format, parse } from 'date-fns';\n\nimport i18next from 'i18next';\nimport DatePicker, { registerLocale } from 'react-datepicker';\nimport uk from 'date-fns/locale/uk';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport '../../UserForm/CustomDatePicker.css';\n\nregisterLocale('uk', uk);\n\nconst PeriodPaginator = ({\n  isMonthPage,\n  nextPeriod,\n  prevPeriod,\n  currentMonth,\n  currentDay,\n  handleCurrentDay,\n}) => {\n  const { currentDate } = useParams();\n  const parsedCurrentDate = parse(currentDate, 'yyyy-MM-dd', new Date());\n\n  const formattedMonth =\n    currentDate === undefined ? currentMonth : parsedCurrentDate;\n\n  const formattedDay =\n    currentDate === undefined ? currentDay : parsedCurrentDate;\n\n  return (\n    <InnerBlock>\n      <CurrentDateWrapper>\n        <DatePicker\n          dateFormat=\"dd/MM/yyyy\"\n          locale={i18next.language === 'ua' ? 'uk' : 'en'}\n          calendarStartDay={1}\n          selected={currentDay}\n          onChange={date => handleCurrentDay(date)}\n          customInput={\n            <CurrentDate>\n              {isMonthPage\n                ? format(formattedMonth, 'MMMM yyyy')\n                : format(formattedDay, 'd MMMM yyyy')}\n            </CurrentDate>\n          }\n        />\n      </CurrentDateWrapper>\n      <ToggleButtons>\n        <ToggleButton onClick={prevPeriod}>{'<'}</ToggleButton>\n        <ToggleButton onClick={nextPeriod}>{'>'}</ToggleButton>\n      </ToggleButtons>\n    </InnerBlock>\n  );\n};\n\nexport default PeriodPaginator;\n","import { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\n\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  LabelList,\n  Label,\n} from 'recharts';\nimport PoppinsFontMedium from '../../fonts/Poppins-Medium.ttf';\nimport { useGetMonthlyTasksQuery } from 'redux/tasks/tasksApi';\n\nexport default function StatisticsChart({\n  currentDay,\n  currentMonth,\n  isLightTheme,\n}) {\n  const { t } = useTranslation();\n\n  const lightLine = 'rgba(227, 243, 255, 1)';\n  const darkLine = 'rgba(227, 243, 255, 0.15)';\n  const lightText = '#343434';\n  const darkText = '#FFF';\n\n  const [themaLine, setThemaLine] = useState(\n    isLightTheme ? lightLine : darkLine\n  );\n  const [themaText, setThemaText] = useState(\n    isLightTheme ? lightText : darkText\n  );\n  \n  const [chartWidth, setChartWidth] = useState(860);\n  const [chartHeight, setChartHeight] = useState(440);\n  const [sizeBar, setSizeBar] = useState(27);\n  const [padChart, setPadChart] = useState(40);\n  const [padTopChart, setPadTopChart] = useState(40);\n  const [padBottomChart, setPadBottomChart] = useState(40);\n  const [fontSize, setFontSize] = useState(16);\n  const [lineHeight, setLineHeight] = useState(18);\n  const [fontSizeL, setFontSizeL] = useState(14);\n  const [lineHeightL, setLineHeightL] = useState(21);\n  const [dataChart, setDataChart] = useState([]);\n  const [tasksPosition, setTasksPosition] = useState(-25);\n  const [marginBar, setMarginBar] = useState(14);\n  const { data: allTasks, refetch } = useGetMonthlyTasksQuery(currentMonth);\n  \n  useEffect(() => {\n    setThemaText(isLightTheme ? lightText : darkText);\n    setThemaLine(isLightTheme ? lightLine : darkLine);\n  }, [isLightTheme]);\n\n  useEffect(() => {\n    refetch();\n    const tasks = allTasks ? [...allTasks.data] : [];\n    const data = [\n      {\n        name: t('statChart.todo'),\n        uv:\n          tasks.length === 0\n            ? 0\n            : Math.ceil(\n                (tasks.filter(task => task.category === 'TODO').length /\n                  tasks.length) *\n                  100\n              ),\n        pv:\n          tasks.filter(task => task.date === currentDay).length === 0\n            ? 0\n            : Math.ceil(\n                (tasks.filter(\n                  task => task.category === 'TODO' && task.date === currentDay\n                ).length /\n                  tasks.filter(task => task.date === currentDay).length) *\n                  100\n              ),\n      },\n      {\n        name: t('statChart.inprogress'),\n        uv:\n          tasks.length === 0\n            ? 0\n            : Math.ceil(\n                (tasks.filter(task => task.category === 'INPROGRESS').length /\n                  tasks.length) *\n                  100\n              ),\n        pv:\n          tasks.filter(task => task.date === currentDay).length === 0\n            ? 0\n            : Math.ceil(\n                (tasks.filter(\n                  task =>\n                    task.category === 'INPROGRESS' && task.date === currentDay\n                ).length /\n                  tasks.filter(task => task.date === currentDay).length) *\n                  100\n              ),\n      },\n      {\n        name: t('statChart.done'),\n        uv:\n          tasks.length === 0\n            ? 0\n            : Math.ceil(\n                (tasks.filter(task => task.category === 'DONE').length /\n                  tasks.length) *\n                  100\n              ),\n        pv:\n          tasks.filter(task => task.date === currentDay).length === 0\n            ? 0\n            : Math.ceil(\n                (tasks.filter(\n                  task => task.category === 'DONE' && task.date === currentDay\n                ).length /\n                  tasks.filter(task => task.date === currentDay).length) *\n                  100\n              ),\n      },\n    ];\n    setDataChart(data);\n  }, [allTasks, currentDay, refetch, t]);\n\n  useEffect(() => {\n    function handleResize() {\n      const screenWidth = window.innerWidth;\n      if (screenWidth <= 375) {\n        setChartWidth(307);\n        setChartHeight(418);\n        setSizeBar(22);\n        setPadChart(14);\n        setPadTopChart(80);\n        setPadBottomChart(40);\n        setFontSize('12px');\n        setLineHeight('16px');\n        setFontSizeL('12px');\n        setLineHeightL('16px');\n        setTasksPosition(0);\n        setMarginBar(4);\n      } else if (screenWidth <= 767) {\n        setChartWidth(307);\n        setChartHeight(418);\n        setSizeBar(22);\n        setPadChart(14);\n        setPadTopChart(80);\n        setPadBottomChart(40);\n        setFontSize('12px');\n        setLineHeight('16px');\n        setFontSizeL('12px');\n        setLineHeightL('16px');\n        setTasksPosition(0);\n        setMarginBar(4);\n      } else if (screenWidth < 1440) {\n        setChartWidth(640);\n        setChartHeight(424);\n        setSizeBar(27);\n        setPadChart(32);\n        setPadTopChart(64);\n        setPadBottomChart(32);\n        setFontSize('16px');\n        setLineHeight('18px');\n        setFontSizeL('14px');\n        setLineHeightL('21px');\n        setTasksPosition(-16);\n        setMarginBar(14);\n      } else {\n        setChartWidth(860);\n        setChartHeight(440);\n        setSizeBar(27);\n        setPadChart(40);\n        setPadTopChart(80);\n        setPadBottomChart(40);\n        setFontSize('16px');\n        setLineHeight('18px');\n        setFontSizeL('14px');\n        setLineHeightL('21px');\n        setTasksPosition(-25);\n        setMarginBar(14);\n      }\n    }\n\n    handleResize();\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  function CustomBar(props) {\n    const { x, y, width, height, borderRadius } = props;\n\n    return (\n      <g>\n        <rect\n          x={x}\n          y={y}\n          width={width}\n          height={height}\n          fill=\"url(#pvGradient)\"\n          rx={borderRadius}\n          ry={borderRadius}\n        />\n      </g>\n    );\n  }\n\n  function CustomBar1(props) {\n    const { x, y, width, height, borderRadius } = props;\n\n    return (\n      <g>\n        <rect\n          x={x + marginBar}\n          y={y}\n          width={width}\n          height={height}\n          fill=\"url(#uvGradient)\"\n          rx={borderRadius}\n          ry={borderRadius}\n        />\n      </g>\n    );\n  }\n  const renderCustomizedLabel = props => {\n    const { x, y, width, value, lineHeight, fontSize } = props;\n    const radius = 10;\n\n    return (\n      <g>\n        <text\n          x={x + width / 2}\n          y={y - radius}\n          fill={themaText}\n          textAnchor=\"middle\"\n          dominantBaseline=\"middle\"\n          fontSize={fontSize}\n          fontStyle={'normal'}\n          fontWeight={500}\n          fontFamily={PoppinsFontMedium}\n          lineheight={lineHeight}\n        >\n          {value}%\n        </text>\n      </g>\n    );\n  };\n  const renderCustomizedLabel1 = props => {\n    const { x, y, width, value, lineHeight, fontSize } = props;\n    const radius = 10;\n\n    return (\n      <g>\n        <text\n          x={x + width / 2 + marginBar}\n          y={y - radius}\n          fill={themaText}\n          textAnchor=\"middle\"\n          dominantBaseline=\"middle\"\n          fontSize={fontSize}\n          fontStyle={'normal'}\n          fontWeight={500}\n          fontFamily={PoppinsFontMedium}\n          lineheight={lineHeight}\n        >\n          {value}%\n        </text>\n      </g>\n    );\n  };\n  return (\n    <BarChart\n      width={chartWidth}\n      height={chartHeight}\n      data={dataChart}\n      margin={{\n        top: padTopChart,\n        right: padChart,\n        left: padChart,\n        bottom: padBottomChart,\n      }}\n      style={{\n        borderRadius: 16,\n        border: `1px solid ${themaLine}`,\n      }}\n    >\n      <CartesianGrid\n        strokeDasharray=\"0 0\"\n        vertical={false}\n        stroke={themaLine}\n        dx={20}\n        horizontal={{\n          strokeWidth: 1,\n        }}\n      />\n\n      <XAxis\n        dataKey=\"name\"\n        axisLine={false}\n        tickLine={false}\n        tick={{\n          dy: 19,\n          fill: `${themaText}`,\n          fontSize: '14px',\n          fontWeight: 400,\n          lineHeight: '21px',\n        }}\n      />\n      <YAxis\n        axisLine={false}\n        tickLine={false}\n        domain={[0, 100]}\n        tick={{\n          fill: `${themaText}`,\n          dx: -padChart,\n          fontSize: '14px',\n          fontWeight: 400,\n          lineHeight: '150%',\n        }}\n      >\n        <Label\n          value={t('statChart.tasks')}\n          position=\"top\"\n          dx={tasksPosition}\n          dy={-24}\n          fill={themaText}\n          style={{\n            fontSize: fontSizeL,\n            fontWeight: 600,\n            lineHeight: lineHeightL,\n          }}\n        />\n      </YAxis>\n\n      <Bar\n        dataKey=\"pv\"\n        fill=\"none\"\n        shape={<CustomBar borderRadius={8} />}\n        barSize={sizeBar}\n        style={{ zIndex: 2 }}\n      >\n        <LabelList\n          dataKey=\"pv\"\n          content={renderCustomizedLabel}\n          lineheight={lineHeight}\n          fontSize={fontSize}\n        />\n      </Bar>\n      <Bar\n        dataKey=\"uv\"\n        barSize={sizeBar}\n        fill=\"none\"\n        style={{\n          zIndex: 2,\n          borderTopLeftRadius: 0,\n          borderTopRightRadius: 0,\n        }}\n        shape={<CustomBar1 borderRadius={8} marginBar={marginBar} />}\n      >\n        <LabelList\n          dataKey=\"uv\"\n          content={renderCustomizedLabel1}\n          lineheight={lineHeight}\n          fontSize={fontSize}\n          marginBar={marginBar}\n        />\n      </Bar>\n      <defs>\n        <linearGradient id=\"pvGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop offset=\"0%\" stopColor=\"rgba(255, 210, 221, 0)\" />\n          <stop offset=\"100%\" stopColor=\"#FFD2DD\" />\n        </linearGradient>\n        <linearGradient id=\"uvGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop offset=\"0%\" stopColor=\"rgba(62, 133, 243, 0)\" />\n          <stop offset=\"100%\" stopColor=\"#3E85F3\" />\n        </linearGradient>\n      </defs>\n    </BarChart>\n  );\n}\n","import styled from '@emotion/styled';\nimport PoppinsFontRegular from '../../fonts/Poppins-Regular.ttf';\nexport const ContainerWrapper = styled.div`\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0 20px 40px;\n\n  @media screen and (min-width: 768px) {\n    padding: 0 32px 40px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    padding: 0 32px 32px;\n  }\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  background-color: var(--main-background-color);\n  border-radius: 16px;\n\n  @media (max-width: 375px) {\n    max-width: 335px;\n    height: 100%;\n    margin: 0 auto;\n    padding: 0 14px;\n    padding-top: 28px;\n    padding-bottom: 135px;\n  }\n\n  @media screen and (min-width: 376px) and (max-width: 767px) {\n    width: 335px;\n    height: 100%;\n    padding: 0 14px;\n    padding-top: 28px;\n    padding-bottom: 135px;\n  }\n\n  @media screen and (min-width: 768px) and (max-width: 1439px) {\n    width: 704px;\n    height: 100%;\n    padding: 0 32px;\n    padding-top: 140px;\n    padding-bottom: auto;\n    padding-bottom: 224px;\n  }\n`;\n\nexport const WrapPeriod = styled.div`\n  width: 860px;\n  display: flex;\n  margin-bottom: 40px;\n  padding: 30px 40px 0;\n\n  @media (max-width: 375px) {\n    max-width: 307px;\n    height: auto;\n    flex-direction: column;\n    padding: 0;\n  }\n\n  @media screen and (min-width: 376px) and (max-width: 767px) {\n    width: 307px;\n    flex-direction: column;\n    padding: 0;\n  }\n\n  @media screen and (min-width: 768px) and (max-width: 1439px) {\n    width: 640px;\n    padding: 0 32px;\n  }\n`;\n\nexport const WrapLabels = styled.div`\n  display: flex;\n  width: 179px;\n\n  @media (max-width: 375px) {\n    max-width: 158;\n    height: auto;\n    margin-top: 20px;\n  }\n  @media screen and (min-width: 376px) and (max-width: 767px) {\n    margin-top: 20px;\n  }\n`;\n\nexport const WrapLabel = styled.div`\n  width: 120px;\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n\n  @media (max-width: 375px) {\n    margin-right: 14px;\n  }\n\n  @media screen and (min-width: 376px) and (max-width: 767px) {\n    margin-right: 14px;\n  }\n`;\n\nexport const Circle = styled.div`\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n`;\nexport const LabelT = styled.p`\n  text-wrap: nowrap;\n  color: var(--calendar-date-color);\n  font-family: ${PoppinsFontRegular};\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 18px;\n  @media (max-width: 375px) {\n    font-size: 14px;\n  }\n\n  @media screen and (min-width: 376px) and (max-width: 767px) {\n    font-size: 14px;\n  }\n`;\n","import { useTranslation, Trans } from 'react-i18next';\nimport PeriodPaginator from 'components/Calendar/PeriodPaginator/PeriodPaginator';\nimport StatisticsChart from 'components/StatisticsChart/StatisticsChart';\nimport {\n  Circle,\n  Container,\n  LabelT,\n  WrapLabel,\n  WrapLabels,\n  WrapPeriod,\n  ContainerWrapper,\n} from 'components/StatisticsChart/StatisticsChart.styled';\nimport {\n  addDays,\n  addMonths,\n  endOfMonth,\n  format,\n  startOfToday,\n  subDays,\n  subMonths,\n} from 'date-fns';\n\nimport { useState } from 'react';\nimport { useOutletContext } from 'react-router-dom';\n\nconst StatisticsPage = () => {\n  const { t } = useTranslation();\n\n  const [isLightTheme] = useOutletContext();\n  \n  const [currentDay, setCurrentDay] = useState(startOfToday());\n  const [currentMonth, setCurrentMonth] = useState(currentDay);\n  const next = () => {\n    const nextDay = addDays(currentDay, 1);\n    if (nextDay.getDate() === 1) {\n      setCurrentMonth(addMonths(currentMonth, 1));\n    }\n    setCurrentDay(nextDay);\n  };\n\n  const previous = () => {\n    const previousDay = subDays(currentDay, 1);\n    if (\n      previousDay.getDate() === endOfMonth(subMonths(currentMonth, 1)).getDate()\n    ) {\n      setCurrentMonth(subMonths(currentMonth, 1));\n    }\n    setCurrentDay(previousDay);\n  };\n  const handleCurrentDay = day => {\n    setCurrentDay(day);\n    setCurrentMonth(day);\n  };\n  return (\n    <ContainerWrapper>\n      <Container>\n        <WrapPeriod>\n          <PeriodPaginator\n            currentDay={currentDay}\n            handleCurrentDay={handleCurrentDay}\n            isMonthPage={false}\n            nextPeriod={next}\n            prevPeriod={previous}\n          />\n\n          <WrapLabels>\n            <WrapLabel>\n              <Circle\n                style={{\n                  backgroundColor: '#FFD2DD',\n                  marginRight: '8px',\n                }}\n              />\n              <LabelT>\n                <Trans i18nKey=\"statChart.day\">By Day</Trans>\n              </LabelT>\n            </WrapLabel>\n            <WrapLabel>\n              <Circle\n                style={{\n                  backgroundColor: '#3E85F3',\n                  marginRight: '8px',\n                }}\n              />\n              <LabelT>{t('statChart.month')}</LabelT>\n            </WrapLabel>\n          </WrapLabels>\n        </WrapPeriod>\n\n        <StatisticsChart\n          currentDay={format(currentDay, 'yyyy-MM-dd')}\n          currentMonth={format(currentMonth, 'yyyy-MM')}\n          isLightTheme={isLightTheme}\n        />\n      </Container>\n    </ContainerWrapper>\n  );\n};\n\nexport default StatisticsPage;\n"],"names":["InnerBlock","styled","div","_templateObject","_taggedTemplateLiteral","CurrentDateWrapper","_templateObject2","CurrentDate","button","_templateObject3","ToggleButtons","_templateObject4","ToggleButton","_templateObject5","registerLocale","uk","_ref","isMonthPage","nextPeriod","prevPeriod","currentMonth","currentDay","handleCurrentDay","currentDate","useParams","parsedCurrentDate","parse","Date","formattedMonth","undefined","formattedDay","_jsxs","children","_jsx","DatePicker","dateFormat","locale","i18next","language","calendarStartDay","selected","onChange","date","customInput","format","onClick","StatisticsChart","isLightTheme","t","useTranslation","lightLine","darkLine","lightText","darkText","_useState","useState","_useState2","_slicedToArray","themaLine","setThemaLine","_useState3","_useState4","themaText","setThemaText","_useState5","_useState6","chartWidth","setChartWidth","_useState7","_useState8","chartHeight","setChartHeight","_useState9","_useState10","sizeBar","setSizeBar","_useState11","_useState12","padChart","setPadChart","_useState13","_useState14","padTopChart","setPadTopChart","_useState15","_useState16","padBottomChart","setPadBottomChart","_useState17","_useState18","fontSize","setFontSize","_useState19","_useState20","lineHeight","setLineHeight","_useState21","_useState22","fontSizeL","setFontSizeL","_useState23","_useState24","lineHeightL","setLineHeightL","_useState25","_useState26","dataChart","setDataChart","_useState27","_useState28","tasksPosition","setTasksPosition","_useState29","_useState30","marginBar","setMarginBar","_useGetMonthlyTasksQu","useGetMonthlyTasksQuery","allTasks","data","refetch","CustomBar","props","x","y","width","height","borderRadius","fill","rx","ry","CustomBar1","useEffect","tasks","_toConsumableArray","name","uv","length","Math","ceil","filter","task","category","pv","handleResize","screenWidth","window","innerWidth","addEventListener","removeEventListener","BarChart","margin","top","right","left","bottom","style","border","concat","CartesianGrid","strokeDasharray","vertical","stroke","dx","horizontal","strokeWidth","XAxis","dataKey","axisLine","tickLine","tick","dy","fontWeight","YAxis","domain","Label","value","position","Bar","shape","barSize","zIndex","LabelList","content","textAnchor","dominantBaseline","fontStyle","fontFamily","PoppinsFontMedium","lineheight","borderTopLeftRadius","borderTopRightRadius","id","x1","y1","x2","y2","offset","stopColor","ContainerWrapper","Container","WrapPeriod","WrapLabels","WrapLabel","Circle","_templateObject6","LabelT","p","_templateObject7","PoppinsFontRegular","_useOutletContext","useOutletContext","startOfToday","setCurrentDay","setCurrentMonth","PeriodPaginator","day","nextDay","addDays","getDate","addMonths","previousDay","subDays","endOfMonth","subMonths","backgroundColor","marginRight","Trans","i18nKey"],"sourceRoot":""}