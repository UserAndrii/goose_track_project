{"version":3,"file":"static/js/899.0182c38c.chunk.js","mappings":"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","sources":["components/Calendar/PeriodPaginator/PeriodPaginator.styled.jsx","components/Calendar/PeriodPaginator/PeriodPaginator.jsx","components/Calendar/PeriodPaginatorType/PeriodPaginatorType.styled.jsx","components/Calendar/PeriodPaginatorType/PeriodPaginatorType.jsx","components/Calendar/CalendarToolbar/CalendarToolbar.styled.jsx","../node_modules/date-fns/esm/add/index.js","components/Calendar/CalendarToolbar/CalendarToolbar.jsx","components/Calendar/Calendar.styled.jsx","../node_modules/date-fns/esm/eachDayOfInterval/index.js","pages/CalendarPage.jsx","../node_modules/date-fns/esm/startOfToday/index.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst InnerBlock = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n\n  @media screen and (min-width: 768px) {\n    justify-content: start;\n  }\n`;\nconst CurrentDateWrapper = styled.div`\n  width: 190px;\n  height: 30px;\n\n  border: none;\n  border-radius: 8px;\n\n  @media screen and (min-width: 768px) {\n    height: 34px;\n    margin-right: 8px;\n  }\n`;\n\nconst CurrentDate = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 8px 12px;\n  width: 190px;\n  height: 30px;\n  color: #fff;\n  background-color: #3e85f3;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 18px;\n  text-transform: uppercase;\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    height: 34px;\n    // margin-right: 8px;\n    font-size: 16px;\n  }\n`;\n\nconst ToggleButtons = styled.div`\n  display: block;\n`;\n\nconst ToggleButton = styled.button`\n  display: inline-block;\n  width: 32px;\n  height: 30px;\n  padding: 8px 12px;\n  background-color: var(--background-button-day);\n  color: var(--feedback-form-text-input);\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  border: 1px solid var(--calendartable-border-color);\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    width: 40px;\n    height: 34px;\n  }\n\n  &:hover {\n    background-color: rgba(136, 165, 191, 0.48);\n  }\n\n  &:first-of-type {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n  }\n\n  &:last-child {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n  }\n`;\n\nexport {\n  InnerBlock,\n  CurrentDate,\n  ToggleButtons,\n  ToggleButton,\n  CurrentDateWrapper,\n};\n","import { useParams } from 'react-router-dom';\nimport {\n  InnerBlock,\n  CurrentDate,\n  ToggleButtons,\n  ToggleButton,\n  CurrentDateWrapper,\n} from './PeriodPaginator.styled';\nimport { format, parse } from 'date-fns';\n\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport '../../UserForm/CustomDatePicker.css';\n\nconst PeriodPaginator = ({\n  isMonthPage,\n  nextPeriod,\n  prevPeriod,\n  currentMonth,\n  currentDay,\n  handleCurrentDay,\n}) => {\n  const { currentDate } = useParams();\n  const parsedCurrentDate = parse(currentDate, 'yyyy-MM-dd', new Date());\n\n  const formattedMonth =\n    currentDate === undefined ? currentMonth : parsedCurrentDate;\n\n  const formattedDay =\n    currentDate === undefined ? currentDay : parsedCurrentDate;\n\n  // const [DataDate, setDataDate] = useState();\n\n  return (\n    <InnerBlock>\n      <CurrentDateWrapper>\n        <DatePicker\n          dateFormat=\"dd/MM/yyyy\"\n          calendarStartDay={1}\n          selected={currentDay}\n          onChange={date => handleCurrentDay(date)}\n          customInput={\n            <CurrentDate>\n              {isMonthPage\n                ? format(formattedMonth, 'MMMM yyyy')\n                : format(formattedDay, 'd MMMM yyyy')}\n            </CurrentDate>\n          }\n        />\n      </CurrentDateWrapper>\n      <ToggleButtons>\n        <ToggleButton onClick={prevPeriod}>{'<'}</ToggleButton>\n        <ToggleButton onClick={nextPeriod}>{'>'}</ToggleButton>\n      </ToggleButtons>\n    </InnerBlock>\n  );\n};\n\nexport default PeriodPaginator;\n","import styled from '@emotion/styled';\n\nconst CalendarRange = styled.div`\n  display: none;\n\n  @media screen and (min-width: 768px) {\n    display: flex;\n  }\n`;\n\nconst Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 76px;\n  height: 34px;\n  padding: 8px 16px;\n  margin-top: 18px;\n  color: #3e85f3;\n  background-color: #e3f3ff;\n\n  &.onMonth {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n    border-right: 1px solid rgba(62, 133, 243, 0.2);\n  }\n\n  &.onDay {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n    border-right: 1px solid rgba(62, 133, 243, 0.2);\n  }\n\n  &.isActive {\n    background-color: #cae8ff;\n  }\n\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  border: 1px solid rgba(220, 227, 229, 0.5);\n\n  cursor: pointer;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 18px;\n\n  &:hover {\n    background-color: rgba(11, 104, 234, 0.2);\n  }\n\n  @media screen and (min-width: 768px) {\n    margin-top: 0px;\n    font-size: 16px;\n  }\n`;\n\nexport { CalendarRange, Button };\n","import { useNavigate } from 'react-router';\n\nimport { CalendarRange, Button } from './PeriodPaginatorType.styled';\n\nimport { format, parse } from 'date-fns';\nimport { useParams } from 'react-router-dom';\n\nconst PeriodPaginatorType = ({ isMonthPage }) => {\n  const navigate = useNavigate();\n\n  const { currentDate } = useParams();\n  const parsedCurrentDate = parse(currentDate, 'yyyy-MM-dd', new Date());\n\n  return (\n    <CalendarRange>\n      <Button\n        className={`onMonth ${isMonthPage ? 'isActive' : ''}`}\n        onClick={() => {\n          navigate(`month/${format(parsedCurrentDate, 'yyyy-MM-dd')}`);\n        }}\n        isMonthPage\n      >\n        Month\n      </Button>\n      <Button\n        className={`onDay ${!isMonthPage ? 'isActive' : ''}`}\n        onClick={() => {\n          navigate(`day/${format(parsedCurrentDate, 'yyyy-MM-dd')}`);\n        }}\n        isMonthPage\n      >\n        Day\n      </Button>\n    </CalendarRange>\n  );\n};\n\nexport default PeriodPaginatorType;\n","import styled from '@emotion/styled';\n\nconst ToolbarWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n`;\n\nconst CalendarRangeWrapper = styled.div`\n  display: flex;\n  margin-left: auto;\n  margin-right: auto;\n  width: 335px;\n\n  @media screen and (min-width: 768px) {\n    display: none;\n  }\n`;\n\nconst CalendarRangeButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 76px;\n  height: 34px;\n  padding: 8px 16px;\n  margin-top: 18px;\n  color: #3e85f3;\n  background-color: #e3f3ff;\n\n  &.onMonth {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n    border-right: 1px solid rgba(62, 133, 243, 0.2);\n  }\n\n  &.onDay {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n    border-right: 1px solid rgba(62, 133, 243, 0.2);\n  }\n\n  &.isActive {\n    background-color: #cae8ff;\n  }\n\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  border: 1px solid rgba(220, 227, 229, 0.5);\n\n  &:hover {\n    background-color: rgba(11, 104, 234, 0.2);\n  }\n`;\n\nexport { ToolbarWrapper, CalendarRangeWrapper, CalendarRangeButton };\n","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport addDays from \"../addDays/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added        |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport default function add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;\n\n  // Add years and months\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date;\n\n  // Add weeks and days\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;\n\n  // Add days, hours, minutes and seconds\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}","import PeriodPaginator from '../PeriodPaginator';\nimport PeriodPaginatorType from '../PeriodPaginatorType';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport {\n  ToolbarWrapper,\n  CalendarRangeWrapper,\n  CalendarRangeButton,\n} from './CalendarToolbar.styled';\n\nimport { format, parse, add } from 'date-fns';\n\nexport const CalendarToolBar = ({\n  isMonthPage,\n  currentMonth,\n  setCurrentMonth,\n  currentDay,\n  setCurrentDay,\n}) => {\n  const navigate = useNavigate();\n  const { currentDate } = useParams();\n  const parsedCurrentDate = parse(currentDate, 'yyyy-MM-dd', new Date());\n  const formattedDay =\n    currentDate === undefined ? currentDay : parsedCurrentDate;\n\n  const prevPeriod = () => {\n    const parsedDate = parse(currentDate, 'yyyy-MM-dd', new Date());\n    if (isMonthPage) {\n      const firstDayPrevMonth = add(parsedDate, { months: -1 });\n      setCurrentMonth(format(firstDayPrevMonth, 'MMM-yyyy'));\n      const newDate = format(firstDayPrevMonth, 'yyyy-MM-dd');\n      navigate(`month/${newDate}`);\n    } else {\n      const prevDay = add(parsedDate, { days: -1 });\n      setCurrentDay(prevDay);\n      const newDate = format(prevDay, 'yyyy-MM-dd');\n      navigate(`day/${newDate}`);\n    }\n  };\n\n  const nextPeriod = () => {\n    const parsedDate = parse(currentDate, 'yyyy-MM-dd', new Date());\n    if (isMonthPage) {\n      const firstDayPrevMonth = add(parsedDate, { months: 1 });\n      setCurrentMonth(format(firstDayPrevMonth, 'MMM-yyyy'));\n      const newDate = format(firstDayPrevMonth, 'yyyy-MM-dd');\n      navigate(`month/${newDate}`);\n    } else {\n      const nextDay = add(parsedDate, { days: 1 });\n      setCurrentDay(nextDay);\n      const newDate = format(nextDay, 'yyyy-MM-dd');\n      navigate(`day/${newDate}`);\n    }\n  };\n  const handleCurrentDay = day => {\n    if (isMonthPage) {\n      setCurrentMonth(format(day, 'MMM-yyyy'));\n      setCurrentDay(day);\n      navigate(`month/${format(day, 'yyyy-MM-dd')}`);\n    } else {\n      setCurrentDay(day);\n      navigate(`day/${format(day, 'yyyy-MM-dd')}`);\n    }\n  };\n  return (\n    <>\n      <ToolbarWrapper>\n        <PeriodPaginator\n          isMonthPage={isMonthPage}\n          prevPeriod={prevPeriod}\n          nextPeriod={nextPeriod}\n          currentDay={currentDay}\n          currentMonth={currentMonth}\n          handleCurrentDay={handleCurrentDay}\n        />\n\n        <PeriodPaginatorType isMonthPage={isMonthPage} />\n      </ToolbarWrapper>\n\n      <CalendarRangeWrapper>\n        <CalendarRangeButton\n          className={`onMonth ${\n            isMonthPage ? 'isActive' : 'rgba(227, 243, 255, 1)'\n          }`}\n          onClick={() => {\n            navigate(`month/${format(formattedDay, 'yyyy-MM-dd')}`);\n          }}\n        >\n          Month\n        </CalendarRangeButton>\n        <CalendarRangeButton\n          className={`onDay ${\n            !isMonthPage ? 'isActive' : 'rgba(227, 243, 255, 1)'\n          }`}\n          onClick={() => {\n            navigate(`day/${format(formattedDay, 'yyyy-MM-dd')}`);\n          }}\n        >\n          Day\n        </CalendarRangeButton>\n      </CalendarRangeWrapper>\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nconst Calendar = styled.div`\ndisplay: flex;\nflex-direction: column;\nflex:1;\nwidth: 100%;\nheight: 100vh;\n  padding: 0px 20px 52px 20px;\n\n  @media screen and (min-width: 768px) {\n    padding: 0px 32px 42px 32px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    padding: 0px 32px 32px 32px;\n  }\n`;\n\nexport { Calendar };\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * const result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\nexport default function eachDayOfInterval(dirtyInterval, options) {\n  var _options$step;\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime();\n\n  // Throw an exception if start date is after end date or if any date is `Invalid Date`\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n  return dates;\n}","import { useState, useEffect } from 'react';\nimport AddTaskModal from 'components/AddTaskModal/AddTaskModal';\nimport { CalendarToolBar } from '../components/Calendar/CalendarToolbar/CalendarToolbar';\nimport { ChoosedMonth } from '../components/Calendar/ChoosedMonth/ChoosedMonth';\nimport { ChoosedDay } from '../components/Calendar/ChoosedDay/ChoosedDay';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { useGetMonthlyTasksQuery } from 'redux/tasks/tasksApi';\nimport { Calendar } from '../components/Calendar/Calendar.styled';\nimport {\n  format,\n  startOfWeek,\n  endOfWeek,\n  endOfMonth,\n  addDays,\n  isWithinInterval,\n  eachDayOfInterval,\n  startOfToday,\n  parse,\n} from 'date-fns';\n\nconst CalendarPage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  /* eslint-disable */\n  const [_, __, monthOrDay, date] = location.pathname.split('/');\n\n  /* eslint-enable */\n\n  // const parsedDate = parse(date, 'yyyy-MM-dd', new Date());\n\n  // if (!isSameDay(parsedDate, currentDay)) setCurrentDay(parsedDate);\n\n  let filteredTask;\n\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  const [isMonthPage, setIsMonthPage] = useState(true);\n\n  const [tasks, setTasks] = useState(null);\n\n  const [currentDay, setCurrentDay] = useState(startOfToday());\n\n  const [currentMonth, setCurrentMonth] = useState(\n    format(startOfToday(), 'MMM-yyyy')\n  );\n  const firstDayCurrentMonth = parse(currentMonth, 'MMM-yyyy', new Date());\n\n  const days = eachDayOfInterval({\n    start: startOfWeek(firstDayCurrentMonth, { weekStartsOn: 1 }),\n    end: endOfWeek(endOfMonth(firstDayCurrentMonth)),\n  });\n\n  const [currentWeek, setCurrentWeek] = useState({\n    start: startOfWeek(currentDay, { weekStartsOn: 1 }),\n    end: addDays(startOfWeek(currentDay, { weekStartsOn: 1 }), 6),\n  });\n  const week = eachDayOfInterval(currentWeek);\n\n  const isInCurrentWeek = isWithinInterval(currentDay, currentWeek);\n\n  if (!isInCurrentWeek) {\n    const newStartOfWeek = startOfWeek(currentDay, {\n      weekStartsOn: 1,\n    });\n    const newEndOfWeek = addDays(\n      startOfWeek(currentDay, { weekStartsOn: 1 }),\n      6\n    );\n\n    const newCurrentWeek = {\n      start: newStartOfWeek,\n      end: newEndOfWeek,\n    };\n\n    setCurrentWeek(newCurrentWeek);\n  }\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    document.body.style.overflow = 'auto';\n  };\n\n  const { currentDate } = useParams();\n  const parsedCurrentDate = parse(currentDate, 'yyyy-MM-dd', new Date());\n  const formattedMonth =\n    currentDate === undefined ? firstDayCurrentMonth : parsedCurrentDate;\n\n  const { data: allTasks } = useGetMonthlyTasksQuery(\n    format(formattedMonth, 'yyyy-MM'),\n    { skip: formattedMonth === undefined }\n  );\n\n  /* eslint-disable */\n  useEffect(() => {\n    navigate(`month/${format(currentDay, 'yyyy-MM-dd')}`);\n  }, []);\n  /* eslint-enable */\n\n  useEffect(() => {\n    if (monthOrDay) {\n      if (monthOrDay === 'month') {\n        setIsMonthPage(true);\n      } else {\n        setIsMonthPage(false);\n      }\n    }\n  }, [monthOrDay]);\n  useEffect(() => {\n    // refetch();\n    if (allTasks) {\n      const Tasks = [...allTasks.data];\n      setTasks(Tasks);\n    }\n  }, [allTasks]);\n\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.key === 'Escape') {\n        handleCloseModal();\n      }\n    };\n\n    if (isModalOpen) {\n      window.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isModalOpen]);\n\n  if (tasks) {\n    const formattedDay = format(currentDay, 'yyyy-MM-dd');\n    filteredTask = tasks.filter(task => task.date === formattedDay);\n  }\n\n  return (\n    <Calendar>\n      <CalendarToolBar\n        currentDay={currentDay}\n        setCurrentDay={setCurrentDay}\n        currentMonth={firstDayCurrentMonth}\n        setCurrentMonth={setCurrentMonth}\n        isMonthPage={isMonthPage}\n        week={week}\n      />\n      {isMonthPage ? (\n        <ChoosedMonth\n          currentDay={firstDayCurrentMonth}\n          days={days}\n          setCurrentDay={setCurrentDay}\n          week={week}\n          allTasks={allTasks && allTasks}\n          setTasks={setTasks}\n          setIsMonthPage={setIsMonthPage}\n        />\n      ) : (\n        <ChoosedDay\n          week={week}\n          currentDay={currentDay}\n          setCurrentDay={setCurrentDay}\n          setIsMonthPage={setIsMonthPage}\n          filteredTask={filteredTask && filteredTask}\n        />\n      )}\n      {isModalOpen && <AddTaskModal onClose={handleCloseModal} />}\n    </Calendar>\n  );\n};\n\nexport default CalendarPage;\n","import startOfDay from \"../startOfDay/index.js\";\n/**\n * @name startOfToday\n * @category Day Helpers\n * @summary Return the start of today.\n * @pure false\n *\n * @description\n * Return the start of today.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @returns {Date} the start of today\n *\n * @example\n * // If today is 6 October 2014:\n * const result = startOfToday()\n * //=> Mon Oct 6 2014 00:00:00\n */\nexport default function startOfToday() {\n  return startOfDay(Date.now());\n}"],"names":["InnerBlock","styled","_templateObject","_taggedTemplateLiteral","CurrentDateWrapper","_templateObject2","CurrentDate","_templateObject3","ToggleButtons","_templateObject4","ToggleButton","_templateObject5","_ref","isMonthPage","nextPeriod","prevPeriod","currentMonth","currentDay","handleCurrentDay","currentDate","useParams","parsedCurrentDate","parse","Date","formattedMonth","undefined","formattedDay","_jsxs","children","_jsx","DatePicker","dateFormat","calendarStartDay","selected","onChange","date","customInput","format","onClick","CalendarRange","Button","navigate","useNavigate","className","concat","ToolbarWrapper","CalendarRangeWrapper","CalendarRangeButton","add","dirtyDate","duration","requiredArgs","arguments","_typeof","NaN","years","toInteger","months","weeks","days","hours","minutes","seconds","toDate","dateWithMonths","addMonths","dateWithDays","addDays","minutesToAdd","secondsToAdd","msToAdd","finalDate","getTime","CalendarToolBar","setCurrentMonth","setCurrentDay","_Fragment","PeriodPaginator","parsedDate","firstDayPrevMonth","newDate","prevDay","nextDay","day","PeriodPaginatorType","Calendar","eachDayOfInterval","dirtyInterval","options","_options$step","interval","startDate","start","endDate","end","endTime","RangeError","dates","setHours","step","Number","isNaN","push","setDate","getDate","filteredTask","_location$pathname$sp","useLocation","pathname","split","_location$pathname$sp2","_slicedToArray","monthOrDay","_useState","useState","_useState2","isModalOpen","setModalOpen","_useState3","_useState4","setIsMonthPage","_useState5","_useState6","tasks","setTasks","_useState7","startOfToday","_useState8","_useState9","_useState10","firstDayCurrentMonth","startOfWeek","weekStartsOn","endOfWeek","endOfMonth","_useState11","_useState12","currentWeek","setCurrentWeek","week","isWithinInterval","handleCloseModal","document","body","style","overflow","allTasks","useGetMonthlyTasksQuery","skip","data","useEffect","Tasks","_toConsumableArray","handleKeyDown","event","key","window","addEventListener","removeEventListener","filter","task","ChoosedMonth","ChoosedDay","AddTaskModal","onClose","startOfDay","now"],"sourceRoot":""}